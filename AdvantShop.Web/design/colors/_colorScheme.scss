@use '../../styles/functions/list';
@use '../../styles/functions/prefixer';

@function getDefaultColorValueChange() {
    @return 5%;
}

@mixin color-scheme-text($name, $color) {
    .cs-t-#{$name} {
        color: $color;
    }

    .mobile-version .cs-t-#{$name}--mobile {
        color: $color;
    }
}

@mixin color-scheme-link($name, $link, $hover, $active, $selected: null, $isFirst: false) {
    @if $isFirst {
        a,
        .link {
            color: $link;

            &:hover {
                color: $hover;
            }

            &:active {
                color: $active;
            }

            @if $selected {
                &.cs-selected {
                    color: $selected;
                }
            }
        }
    }

    .cs-l-#{$name},
    .cs-l-d-#{$name} {
        color: $link;

        &:hover {
            color: $hover;
        }

        &:active {
            color: $active;
        }

        @if $selected {
            &.cs-selected {
                color: $selected;
            }
        } @else {
            &.cs-selected {
                color: $hover;
            }
        }
    }

    .cs-l-d-#{$name},
    .cs-l-ds-#{$name} {
        border-bottom-color: $link;

        &:hover {
            border-bottom-color: $hover;
        }

        &:active {
            border-bottom-color: $active;
        }

        @if $selected {
            &.cs-selected {
                color: $selected;
            }
        }
    }
}

@mixin color-scheme-button($name, $bg, $color, $bgHover, $colorHover, $bgActive, $colorActive, $bgDisabled: null, $colorDisabled: null) {
    .btn-#{$name} {
        color: $color;
        background: $bg;

        &:hover {
            color: $colorHover;
            background: $bgHover;
        }

        &:active {
            color: $colorActive;
            background: $bgActive;
        }

        @if $colorDisabled and $bgDisabled {
            &:disabled,
            &.btn-disabled {
                color: $colorDisabled;
                background: $bgDisabled;
            }
        }
    }
}

@mixin color-scheme-bg($name, $bg, $bgHover: null, $bgActive: null) {
    .cs-bg-#{$name} {
        background-color: $bg;
    }

    @if $bgHover or $bgActive {
        .cs-bg-i-#{$name} {
            background-color: $bg;

            @if $bgHover {
                &:hover {
                    background-color: $bgHover;
                }
            }

            @if $bgActive {
                &:active {
                    background-color: $bgActive;
                }

                &.cs-selected {
                    background-color: $bgActive;
                }
            }
        }
    }

    .mobile-version {
        .cs-bg-#{$name}--mobile {
            background-color: $bg;
        }

        @if $bgHover or $bgActive {
            .cs-bg-i-#{$name}--mobile {
                background-color: $bg;

                @if $bgHover {
                    &:hover {
                        background-color: $bgHover;
                    }
                }

                @if $bgActive {
                    &:active {
                        background-color: $bgActive;
                    }

                    &.cs-selected--mobile {
                        background-color: $bgActive;
                    }
                }
            }
        }
    }
}

@mixin color-scheme-gradient($name, $angle, $gradient, $angleHover: null, $gradientHover: null, $angleActive: null, $gradientActive: null) {
    .cs-g-#{$name} {
        @include prefixer.linear-gradient($angle, unquote($gradient));
    }

    @if $gradientHover or $gradientActive {
        .cs-g-#{$name}-i {
            @include prefixer.linear-gradient($angle, unquote($gradient));

            @if $gradientHover {
                &:hover {
                    @include prefixer.linear-gradient($angleHover, unquote($gradientHover));
                }
            }

            @if $gradientActive {
                &:active {
                    @include prefixer.linear-gradient($angleActive, unquote($gradientActive));
                }
            }
        }
    }
}

@mixin color-scheme-borders-color($name, $leftBorder, $topBorder: null, $rightBorder: null, $bottomBorder: null) {
    .cs-br-#{$name} {
        border-color: ($topBorder or $leftBorder) ($rightBorder or $leftBorder) ($bottomBorder or $topBorder or $leftBorder) $leftBorder !important;
    }
}
