@using Newtonsoft.Json
@using AdvantShop.Core.Services.Configuration.Settings
@using AdvantShop.Customers
@model  AdvantShop.Areas.Mobile.Models.Catalog.CategoryMobileViewModel
@{
    Html.AddAsset("catalog");
}
@{
    var category = Model.Category;
    var tag = Model.Tag;
    var briefDescription = tag != null ? tag.BriefDescription : category.BriefDescription;
    var description = tag != null ? tag.Description : category.Description;
    var editLink = CustomerContext.CurrentCustomer.CustomerRole == Role.Administrator ||
                   (CustomerContext.CurrentCustomer.CustomerRole == Role.Moderator && CustomerContext.CurrentCustomer.HasRoleAction(RoleAction.Catalog));
}

<div id="content" class="catalog">
    @Html.Action("BreadCrumbs", "Common", new { Model.BreadCrumbs })

    <div class="no-borders main-product-cell">
        <h1 class="category-title-mobile page-title main-title" itemprop="name">@Html.GetPageH1()</h1> @*cs-bg-4--mobile cs-bg-4*@
    </div>
    @if (editLink)
    {
        <div class="catalog__edit-link">
            <a target="_blank" href="@UrlService.GetUrl("adminv2/category/edit/" + category.CategoryId)">@T("Catalog.Index.EditInAdminArea")</a>
        </div>
    }
    <div>
        @if (!string.IsNullOrWhiteSpace(briefDescription) && Model.Pager.CurrentPage == 1)
        {
            <div class="category-description">
                @Html.Raw(briefDescription)
            </div>
        }

        @Html.RenderModules("category_top", category)

        @Html.Action("CategoryList", "Catalog", new { categoryId = category.CategoryId, displayStyle = category.DisplayStyle })

        @if (Model.Filter != null && Model.Filter.IsApplied || Model.HasProducts)
        {
            <div class="panel no-borders catalog-sort-block cs-br-1 cs-bg-4">
                <div class="catalog-sort-pnl catalog__sort-panel" data-ng-controller="CatalogFilterMobileCtrl as catalogFilter">
                    @if (Model.HasProducts)
                    {
                        @Html.Partial("_Sorting", Model.SortingList)
                    }

                    @Html.Partial("_CatalogFilter", Model)
                </div>
            </div>
        }

        @if (Model.HasProducts)
        {
            <div class="panel catalog-sort-view-mode cs-br-1">
                <div class="catalog-sort-pnl">
                    <div class="catalog-sort__count">@T("Mobile.Category.Index.ProductsCount"): @Model.Pager.TotalItemsCount</div>
                    @if (Model.Filter.AllowChangeViewMode)
                    {
                        @Html.Partial("_ViewMode", Model.Filter.ViewMode)
                    }
                </div>
            </div>
        }

        @Html.Partial("_TagView", Model.TagView)

        @if (Model.HasProducts)
        {
            <div class="catalog-view products-view-mobile-modern-@(Model.Products.ProductViewMode.ToString().ToLower())"
                 data-product-view-mode
                 data-name="mobileModern"
                 data-view-list-name="mobileModern"
                 data-is-mobile="true"
                 data-default-view-mode="@Model.Filter.ViewMode"
                 data-photo-height-by-view-mode-default="'@(Model.Products.BlockProductPhotoHeight)px'"
                 data-photo-height-by-view-mode="{viewName: 'single', value: '@(Model.Products.BlockProductPhotoMiddleHeight)px'}">
                <div data-show-more
                     data-request-url="/mobile/catalog/getCategoryProductList"
                     data-data-params="{url: '@category.UrlPath', 
                                        categoryId: @category.CategoryId, 
                                        page: @Model.Pager.CurrentPage, 
                                        priceFrom: @(Model.Filter.PriceFrom != null ? Model.Filter.PriceFrom.ToInvariantString() : "null"), 
                                        priceTo: @(Model.Filter.PriceTo != null ? Model.Filter.PriceTo.ToInvariantString() : "null"), 
                                        brand:@JsonConvert.SerializeObject(Model.Filter.BrandIds), 
                                        color:@JsonConvert.SerializeObject(Model.Filter.ColorIds), 
                                        prop: @JsonConvert.SerializeObject(Model.Filter.PropertyIds), 
                                        size: @JsonConvert.SerializeObject(Model.Filter.SizeIds), 
                                        sort: '@Model.Filter.Sorting', 
                                        tagId: @(Model.Tag != null ? Model.Tag.Id : 0), tagUrl: '@(Model.Tag != null ? Model.Tag.UrlPath : "")' }">
                    @* priceTo строчка т.к по умолчанию число 2,147484E+09 *@
                    <div class="catalog-view__product-item-wrap"
                         data-show-more-init-html>
                        @Html.Partial("_ProductView", Model.Products)
                    </div>

                    <div class="catalog-view__product-item-wrap"
                         data-bind-html-compile="showMore.products">
                    </div>
                    <div data-ng-if="showMore.isShowSpinner"
                         class="spinner-after spinner text-align-center"></div>

                    <div class="panel no-borders pagination-block-wrap cs-br-1">
                        <div class="text-align-center js-get-more-btn-wrap">
                            <button type="button"
                                    data-ng-click="showMore.getMore()"
                                    class="btn btn-middle btn-action btn-block"
                                    data-ng-if="showMore.page < @Model.Pager.TotalPages">
                                @T("Mobile.Catalog.ShowMore")
                            </button>
                        </div>
                        @Html.Paging(Model.Pager, "center-aligner", "showMore", true)
                    </div>
                </div>
            </div>
        }
        else if (Model.Filter != null && Model.Filter.IsApplied)
        {
            <div class="container-fluid">
                <div class="category-not-found-text">@T("Search.Index.NothingFound")</div>
            </div>
        }
        @Html.RenderModules("category_bottom", category)
        @if (!string.IsNullOrWhiteSpace(description) && Model.Pager.CurrentPage == 1)
        {
            <div class="category-description">
                @Html.Raw(description)
            </div>
        }
        @Html.StaticBlock("CatalogRightBottom")
    </div>
</div>
