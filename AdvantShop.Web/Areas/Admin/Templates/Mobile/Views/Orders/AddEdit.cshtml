@using AdvantShop.Core.Services.Configuration.Settings
@using AdvantShop.Core.Services.Orders
@model AdvantShop.Web.Admin.Models.Orders.OrdersEdit.OrderModel
@{
    Html.AddAsset("order");
}

@{
    var order = Model.Order;
    var isDraft = !Model.IsEditMode || Model.Order == null || Model.Order.IsDraft;
    bool hasContacts = Model.Customer != null && Model.Customer.Contacts != null && Model.Customer.Contacts.Count > 0;
    var customerId = Guid.Empty;
    string orderStatusId = null;
    var isMobile = SettingsDesign.IsMobileTemplate;

    if (order != null)
    {
        if (order.OrderCustomer != null)
        {
            customerId = order.OrderCustomer.CustomerID;
        }

        orderStatusId = order.OrderStatusId.ToString();
    }
    else
    {
        var status = Model.OrderStatuses.FirstOrDefault();
        orderStatusId = status != null ? status.Value : null;
    }
}


<form method="POST" action="@(!isDraft ? Url.AbsoluteActionUrl("Edit") : Url.AbsoluteActionUrl("Add"))" novalidate="novalidate" name="form" id="orderForm" class="order-page @(!Model.IsEditMode ? "order-page--create" : "" )">
    @Html.AntiForgeryToken()
    <div ng-init="order.initOrder(@Model.OrderId, @Model.IsEditMode.ToLowerString(), @isDraft.ToLowerString(), '@customerId', '@Model.StandardPhone', @hasContacts.ToLowerString())">

        <input name="IsEditMode" type="hidden" value="{{order.isEditMode}}" />
        <input name="OrderId" type="hidden" value="{{order.orderId}}" />
        <input name="Order.OrderId" type="hidden" value="{{order.orderId}}" />
        <input name="Order.IsDraft" type="hidden" value="{{order.isDraft}}" />

        <input name="Order.OrderCustomer.CustomerId" type="hidden" value="{{order.customerId}}" />
    </div>

    @{
        var headerModel = new AdvantShop.Web.Admin.ViewModels.Shared.Common.HeaderViewModel();
        headerModel.Back = new AdvantShop.Web.Admin.ViewModels.Shared.Common.BackViewModel()
        {
            Url = Url.AbsoluteActionUrl("Index", "Orders")
        };

        headerModel.Controls = new List<IButton>();

        headerModel.Title = Model.IsEditMode ? !isDraft ? T("AdminMobile.Orders.AddEdit.OrderTitle").ToString() + (" №" + order.Number) : T("AdminMobile.Orders.AddEdit.OrderDraftTitle").ToString() : T("Admin.Orders.AddEdit.CreationOfNewOrder").ToString();
        // if (Model.IsEditMode)
        // {
        //     headerModel.Title = T(!isDraft ? "AdminMobile.Orders.AddEdit.OrderTitle" : "AdminMobile.Orders.AddEdit.OrderDraftTitle", "").ToString();
        // }
        // else
        // {
        //     headerModel.Title = T("Admin.Orders.AddEdit.CreationOfNewOrder").ToString();
        // }

        if (isDraft)
        {

            headerModel.Controls.Add(new ButtonModel()
            {
                Modificators = new List<eButtonModificators>()
            {
                    eButtonModificators.OnlyIcon
                },
                ColorType = eColorType.Secondary,
                Type = eButtonType.Save,
                Attributes = new[] { "data-button-validation", "ng-disabled=\"order.orderId == 0 && order.lastName == null && order.firstName == null && order.patronymic == null && order.email == null && order.phone == null\"", "disabled" },
                Icon = new ButtonIcon()
                {
                    SvgName = "done",
                    Attributes = new { width = 25, height = 25 }
                }
            });
        }

        if (Model.IsEditMode)
        {
            var moreButton = new MoreButtonModel();
            moreButton.ColorType = eColorType.Secondary;
            moreButton.NgTemplateId = "moreButtonHeaderTemplate";
            moreButton.Items = new List<MoreButtonPopoverItem>()
        {
                    new MoreButtonPopoverItem()
                    {
                        ColorType = eColorType.Link,
                        Modificators = new List<eButtonModificators>()
                    {
                            eButtonModificators.HorizontalPaddingZero
                        },
                        Link = Url.AbsoluteActionUrl("ExportOrder", "Analytics", new { orderId = Model.OrderId }),
                        Text = T("Admin.Orders.AddEdit.ExportExcel"),
                        Icon = new ButtonIcon(){
                            SvgName = "document-export",
                            Attributes = new { width = 24, height = 24 }
                        }
                    },
                    new MoreButtonPopoverItem()
                    {
                        ColorType = eColorType.Link,
                        Modificators = new List<eButtonModificators>()
                    {
                            eButtonModificators.HorizontalPaddingZero
                        },
                        Link = Url.AbsoluteRouteUrl("PrintOrder", new { code = order.Code, showMap = "true" }) + "{{order.gridOrderItemsSorting}}",
                        Text = T("Admin.Orders.AddEdit.Print"),
                        Attributes = new string[]{ "target=\"_blank\"", "onclick=\"return advTrack('@AdvantShop.Track.ETrackEvent.Core_Orders_PrintOrder_AdminArea.ToString()');\"" },
                        Icon = new ButtonIcon(){
                            SvgName = "print",
                            Attributes = new { width = 24, height = 24 }
                        }
                    },
                    new MoreButtonPopoverItem()
                        {
                        Text =T("Admin.Orders.AddEdit.DeleteOrder"),
                        Modificators = new List<eButtonModificators>()
                    {
                            eButtonModificators.HorizontalPaddingZero
                        },
                        Type = eButtonType.Link,
                        ColorType = eColorType.Danger,
                        Attributes = new[] { "ng-click=\"order.deleteOrder()\"" },
                        Icon = new ButtonIcon(){
                            SvgName = "remove",
                            Attributes = new { width = 24, height = 24 }
                        }
                    }
                };

            headerModel.Controls.Add(moreButton);
        }
    }

    @Html.Header(headerModel)

    @if (Model.IsEditMode)
    {
        <div class="custom-input-decorator order-page__order-date">
            <div class="corder-page__order-date" ng-init="order.date='@order.OrderDate.ToString("yyyy-MM-ddTHH:mm:ss.ffffzzz")'">
                <div class="input-group position-static" ng-flatpickr fp-on-change="order.setDate(selectedDates, dateStr, instance)" fp-opts="{dateFormat: 'd.m.Y H:i:S', startDateFormat: 'Y-m-dTH:i:S', wrap: true, enableTime: true, enableSeconds: true}">
                    <span class="flatpickr-custom-wrap position-static">
                        <input type="text" id="Order_OrderDate" name="Order.OrderDate" class="form-control custom-input-decorator__native input-alt" ng-flatpickr-input ng-model="order.date" value="@order.OrderDate.ToString("yyyy-MM-ddTHH:mm:ss.ffffzzz")">
                    </span>
                </div>
                <label for="Order_OrderDate" class="custom-input-decorator__trigger custom-input-decorator__select">
                    <span class="custom-input-decorator__select-text" ng-bind="order.formatDateString(order.date)">@order.OrderDate.ToString("dd.MM.yyyy hh:mm")</span>
                    <span class="custom-input-decorator__select-chevron">
                        <svg xmlns="http://www.w3.org/2000/svg" height="20" viewBox="0 0 24 24" width="20" class="custom-input-decorator__select-chevron-icon">
                            <path fill="none" d="M24 24H0V0h24v24z" opacity=".87" />
                            <path fill="currentColor" d="M15.88 9.29L12 13.17 8.12 9.29c-.39-.39-1.02-.39-1.41 0-.39.39-.39 1.02 0 1.41l4.59 4.59c.39.39 1.02.39 1.41 0l4.59-4.59c.39-.39.39-1.02 0-1.41-.39-.38-1.03-.39-1.42 0z" />
                        </svg>
                    </span>
                </label>
            </div>
        </div>

        <div class="order-page__info-status">
            <div class="order-page__order-number">
                №@(order.Number)
            </div>
            <div class="flex flex-wrap row-gap-xs g-xs">
                <div class="custom-input-decorator order-page__order-status">
                    @Html.DropDownListFor(x => x.Order.OrderStatusId, Model.OrderStatuses, new { @class = "custom-input-decorator__native", ng_model = "order.orderStatus", ng_on_change = "order.changeStatus($event)", ng_init = "order.orderStatus='" + orderStatusId + "'; order.orderStatusOld='" + orderStatusId + "'", bs_modifiable = "false" })
                    <label for="Order_OrderStatusId" ng-style="{'color':  '#' + order.colorStatusOrder || '#@(order.OrderStatus.Color)'}" class="custom-input-decorator__trigger custom-input-decorator__select" style="color:#@(order.OrderStatus.Color);">
                        <span class="custom-input-decorator__select-text" data-ng-bind="order.statusText || '@order.OrderStatus.StatusName'">@order.OrderStatus.StatusName</span>
                        <span class="custom-input-decorator__select-chevron">
                            <svg xmlns="http://www.w3.org/2000/svg" height="20" viewBox="0 0 24 24" width="20" class="custom-input-decorator__select-chevron-icon">
                                <path fill="none" d="M24 24H0V0h24v24z" opacity=".87" />
                                <path fill="currentColor" d="M15.88 9.29L12 13.17 8.12 9.29c-.39-.39-1.02-.39-1.41 0-.39.39-.39 1.02 0 1.41l4.59 4.59c.39.39 1.02.39 1.41 0l4.59-4.59c.39-.39.39-1.02 0-1.41-.39-.38-1.03-.39-1.42 0z" />
                            </svg>
                        </span>
                    </label>
                </div>
                <div class="custom-input-decorator order-page__order-payment-state">
                    <select id="orderIsPayed" name="IsPayed" ng-model="order.isPaied" ng-on-change="order.setPaied(order.isPaied)" convert-to-bool class="custom-input-decorator__native">
                        <option value="False">@T("Admin.Orders.AddEdit.UnPaid")</option>
                        <option value="True">@T("Admin.Orders.AddEdit.Paid")</option>
                    </select>
                    <label for="orderIsPayed" class="custom-input-decorator__trigger custom-input-decorator__select" style="color:#@(order.Payed ? "2d9cee" : "ACAEAF");" ng-style="{color: '#' + (order.isPaied ? '2d9cee' : 'ACAEAF')}">
                        <span class="custom-input-decorator__select-text" data-ng-bind="order.isPaied ? '@T("Admin.Orders.AddEdit.Paid")' : '@T("Admin.Orders.AddEdit.UnPaid")'">@(order.Payed ? T("Admin.Orders.AddEdit.Paid") : T("Admin.Orders.AddEdit.UnPaid"))</span>
                        <span class="custom-input-decorator__select-chevron">
                            <svg xmlns="http://www.w3.org/2000/svg" height="20" viewBox="0 0 24 24" width="20" class="custom-input-decorator__select-chevron-icon">
                                <path fill="none" d="M24 24H0V0h24v24z" opacity=".87" />
                                <path fill="currentColor" d="M15.88 9.29L12 13.17 8.12 9.29c-.39-.39-1.02-.39-1.41 0-.39.39-.39 1.02 0 1.41l4.59 4.59c.39.39 1.02.39 1.41 0l4.59-4.59c.39-.39.39-1.02 0-1.41-.39-.38-1.03-.39-1.42 0z" />
                            </svg>
                        </span>
                    </label>
                </div>
            </div>

            @* @if (isDraft) *@
            @* { *@
            @*     @Html.Button(T("Admin.Orders.Index.AddOrder"), eButtonType.Save, attributes: new[] { "ng-disabled=\"order.orderId == 0 && order.lastName == null && order.firstName == null && order.patronymic == null && order.email == null && order.phone == null\"", "disabled" }) *@
            @* } *@

            @if (order != null && Settings1C.Enabled)
            {
                <div class="order-page__1c">
                    <label class="adv-checkbox-label">
                        @Html.CheckBoxFor(x => x.Order.UseIn1C, new { ng_model = "order.UseIn1C", ng_change = "order.set1CExportOrder(order.UseIn1C)", ng_init = "order.UseIn1C=" + (Model.Order != null ? Model.Order.UseIn1C.ToLowerString() : "false"), @class = "adv-checkbox-input" })
                        <span class="adv-checkbox-emul"></span>
                        @T("Admin.Orders.AddEdit.ExportOrder")
                    </label>
                    @{
                        var status1C = OrderStatus1CService.GetStatus1C(order.OrderID);
                        if (status1C != null)
                        {
                            <div class="order-page__text">@T("Admin.Orders.AddEdit.OrderStatusIn1C")@status1C.Status1C</div>
                        }
                    }
                </div>
            }
        </div>
    }
    @*else
        {
            <div class="order-page__title">@T("Admin.Orders.AddEdit.CreationOfNewOrder")</div>
        }*@

    <div class="order-page__order-info-wrap">
        @Html.Partial("_OrderInfo", Model)

        @if (Model.IsEditMode)
        {
            if (SettingsCheckout.ManagerConfirmed)
            {

                <label class="adv-checkbox-label order-page__row">
                    @Html.CheckBoxFor(x => x.Order.ManagerConfirmed, new { ng_model = "order.ManagerConfirmed", ng_change = "order.setManagerConfirmer(order.ManagerConfirmed)", ng_init = "order.ManagerConfirmed=" + (Model.Order != null ? Model.Order.ManagerConfirmed.ToLowerString() : "false"), @class = "adv-checkbox-input" })
                    <span class="adv-checkbox-emul"></span>
                    @T("Admin.Orders.AddEdit.OrderIsConfirmedAllowPay")
                </label>

            }
        }

        @Html.RenderModules("admin_order_top", new { orderId = Model.OrderId })

        @if (isDraft)
        {
            @Html.Partial("_OrderCustomer")
            @Html.Partial("_OrderAddress")
        }

    </div>

    <div class="order-page__order-items">
        @Html.Partial("_OrderItems")
    </div>

    @if (Model.IsEditMode)
    {
        @Html.Action("ClientInfo", Model)
    }

    <div class="order-page__additionally">
        @Html.Partial("_Additionally", Model)
    </div>


    @if (Model.IsEditMode)
    {
        if (AdvantShop.Core.Services.Bonuses.BonusSystem.IsActive && (!AdvantShop.Saas.SaasDataService.IsSaasEnabled || AdvantShop.Saas.SaasDataService.CurrentSaasData.BonusSystem))
        {
            <div class="order-page__bonus-card">
                @Html.Partial("_ClientBonusCard")
            </div>
        }
    }
    
    @if (Model.IsEditMode)
    {
        @Html.Partial("_OrderAdminAttachments", Model)
    }
    @if (Model.IsEditMode)
    {
        @Html.Partial("_TemplateDocx", Model)
    }
    @Html.RenderModules("admin_order_right", new { orderId = Model.OrderId })


    @if (Model.IsEditMode)
    {

        <uib-tabset active uid="orderTabs" headers-overflow-type="scroll" class="nav-tabs-wrap nav-tabs-wrap--chips">
            @if (Model.Customer != null)
            {
                <uib-tab index="0" heading="@T("Admin.Orders.AddEdit.Сommunications")" classes="ng-tab" removable="true">
                    <div>
                        <lead-events class="lead-events--mobile" customer-id="'@Model.Customer.Id'" obj-id="@Model.OrderId" obj-type="'order'" page-type="order" on-init="order.leadEventsOnInit(leadEvents)" bs-modifiable="false">
                        </lead-events>
                    </div>
                </uib-tab>
            }

            <uib-tab index="1" heading="@T("Admin.Orders.AddEdit.OrderDiscussion")" classes="ng-tab" removable="true">
                <admin-comments obj-id="order.orderId" type="'order'" form-visible="true" bs-modifiable="false"></admin-comments>
            </uib-tab>

            <uib-tab index="2" heading="@T("Admin.Orders.AddEdit.ChangesHistory")" classes="ng-tab" removable="true">
                <order-status-history data-order-id="@Model.OrderId" on-init="order.statusHistoryOnInit(orderStatusHistory)"></order-status-history>
                <order-history data-order-id="@Model.OrderId" on-init="order.orderHistoryOnInit(orderHistory)"></order-history>
            </uib-tab>

            @if (Model.ShowTasks)
            {
                <uib-tab index="3" heading="@T("Admin.Orders.AddEdit.Tasks") {{order.taskGrid.gridTasks.gridOptions.totalItems > 0 ? '(' + order.taskGrid.gridTasks.gridOptions.totalItems + ')' : ''}}"
                         classes="ng-tab" removable="true">
                    <tasks-grid obj-id="order.orderId" type="order"
                                on-init="order.taskGridOnOnit(taskGrid)"
                                is-admin="@CustomerContext.CurrentCustomer.IsAdmin.ToLowerString()">
                    </tasks-grid>
                </uib-tab>
            }

            <uib-tab id="customerOrderAttachments" index="4" heading="@T("Admin.Orders.AddEdit.CustomerOrderAttachments")" classes="ng-tab" removable="true">
                <div class="ibox-content">
                    <ol class="p-l-sm" ng-if="order.customerOrderAttachments.length > 0">
                        <li ng-repeat="attachment in order.customerOrderAttachments track by $index">
                            <a href="" target="_blank" ng-href="{{attachment.FilePathAdmin}}" ng-bind="attachment.OriginFileName ? attachment.OriginFileName : attachment.FileName"></a>
                            - <span ng-bind="attachment.FileSize"></span>
                            <a href=""
                               ng-click="order.deleteCustomerOrderAttachment(attachment.Id, $index)"
                               class="link-decoration-none fa fa-times link-invert btn-icon"
                               aria-label="@T("Admin.Orders.OrderItems.Delete")"></a>
                        </li>
                    </ol>

                    <figure>
                        <button class="btn btn-action btn-sm"
                                ngf-change="order.updateCustomerOrderAttachments($files, $file, $newFiles, $duplicateFiles, $invalidFiles, $event)"
                                type="button"
                                ngf-drop
                                ngf-max-size="15MB"
                                ngf-select=""
                                ngf-keep="true"
                                ngf-pattern="'@Model.AllowedFileExtensions'"
                                ngf-accept="'@Model.AllowedFileExtensions'"
                                ngf-multiple="true"
                                ladda="order.loadingFiles">
                            <i class="fa fa-upload"></i>&nbsp;&nbsp;<span class="bold">@T("Admin.Orders.OrderItems.SelectFile")</span>
                        </button>
                        <help-trigger class="ng-cloak m-l-xs" use-template="true">
                            <div class="help-content">@Html.Raw(Model.FilesHelpText)</div>
                        </help-trigger>
                    </figure>
                </div>
            </uib-tab>
        </uib-tabset>

    }


    @*<div class="order-nav m-t-md">
            @if (Model.PrevOrderId.HasValue)
            {
                <a href="@Url.AbsoluteActionUrl("Edit", "Orders", new { id = Model.PrevOrderId.Value })" class="order-nav__control">
                    <svg width="20" height="26" viewBox="0 0 10 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M.226 8.543c-.301-.3-.301-.785 0-1.086L7.362.326a1.113 1.113 0 011.575 1.573L2.832 8l6.105 6.1a1.114 1.114 0 01-1.575 1.574L.226 8.544z" fill="currentColor"></path>
                    </svg>
                </a>
            }
            else
            {
                <span class="order-nav__control order-nav__control--disabled">
                    <svg width="20" height="26" viewBox="0 0 10 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M.226 8.543c-.301-.3-.301-.785 0-1.086L7.362.326a1.113 1.113 0 011.575 1.573L2.832 8l6.105 6.1a1.114 1.114 0 01-1.575 1.574L.226 8.544z" fill="currentColor"></path>
                    </svg>
                </span>
            }
            @if (Model.NextOrderId.HasValue)
            {
                <a href="@Url.AbsoluteActionUrl("Edit", "Orders", new { id = Model.NextOrderId.Value})" class="order-nav__control order-nav__control--rotate m-l-md">
                    <svg width="20" height="26" viewBox="0 0 10 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M9.032 8.543a.766.766 0 000-1.086L1.896.326A1.113 1.113 0 00.321 1.899L6.426 8 .321 14.1a1.114 1.114 0 001.575 1.574l7.136-7.13v-.001z" fill="currentColor" />
                    </svg>
                </a>
            }
            else
            {
                <span class="order-nav__control order-nav__control--disabled m-l-md">
                    <svg width="20" height="26" viewBox="0 0 10 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M9.032 8.543a.766.766 0 000-1.086L1.896.326A1.113 1.113 0 00.321 1.899L6.426 8 .321 14.1a1.114 1.114 0 001.575 1.574l7.136-7.13v-.001z" fill="currentColor" />
                    </svg>
                </span>
            }
        </div>*@
</form>