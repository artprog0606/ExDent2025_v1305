@using AdvantShop.Web.Admin.Models.Settings.Templates
@model AdvantShop.Web.Admin.Models.Settings.Templates.SettingsTemplateModel

@{
    var isMobile = SettingsDesign.IsMobileTemplate;
    var template = SettingsDesign.TemplateInDb.ToString();
}

<div class="setting-title m-t-none" ng-hide="settingsTemplate.isHidden('SectionCatalogCategories')">
    <h3 class="setting__subtitle">@T("Admin.Settings.Template.CountCategoriesTitle")</h3>
</div>
<div class="form-group row setting__form-group" ng-hide="settingsTemplate.isHidden('SectionCatalogCategories')">
    <div class="col-xs-12 col-md-3 col-wl-2">
        <label for="settingsTemplateCountCategoriesInLine" class="setting-label-wrap control-label">
            @T("Admin.Settings.Template.CountCategoriesInLineTitle")
        </label>
    </div>
    <div class="col-xs-12 col-md-1 flex middle-xs relative">
        @Html.TextBoxFor(x => x.CountCategoriesInLine, new { id = "settingsTemplateCountCategoriesInLine", @class = "form-control input-small input-alt-mobile", ng_model = "settingsTemplate.CountCategoriesInLine" })
        <help-trigger class="ng-cloak help-trigger-icon-abs m-l-x @(isMobile ? "p-l-sm" : "")" classes="'setting__catalog-popover-custom'" data-title="@T("Admin.Settings.Template.CountCategoriesInLineTitle")">
            @T("Admin.SettingsCatalog.CatalogCommon.CountCategoriesInLineNote")
        </help-trigger>
    </div>
</div>

<div class="setting-title" 
     ng-class="{'m-t-none': settingsTemplate.isHidden('SectionCatalogCategories'),'setting-title__m-t-md' : !settingsTemplate.isHidden('SectionCatalogCategories')}">
    <h3 class="setting__subtitle">@T("Admin.Settings.Catalog.ProductsDisplaying")</h3>
</div>

<div class="form-group setting__form-group" ng-hide="settingsTemplate.isHidden('ShowQuickView')">
    <div class="row middle-xs @(isMobile ? "" : "control-label")">
        @if (!isMobile)
        {
            <div class="col-xs col-md-3 col-wl-2">
                <label for="settingsTemplateShowQuickView" class="setting__font-weight--xs">
                    @T("Admin.Settings.Catalog.ShowQuickView")
                </label>
            </div>
        }
        <div class="relative @(isMobile ? "col-xs" : "col-xs-slim relative flex middle-xs first-xs last-md")">
            <label class="adv-checkbox-label flex">
                @Html.CheckBoxFor(x => x.ShowQuickView, new { id = "settingsTemplateShowQuickView", @class = "adv-checkbox-input input-aly-mobile", ng_model = "settingsTemplate.ShowQuickView" })
                <span class="adv-checkbox-emul" data-e2e="ShowQuickView"></span>
                @if (isMobile)
                {
                    <span>@T("Admin.Settings.Catalog.ShowQuickView")</span>
                }
            </label>
        </div>
        <help-trigger class="ng-cloak last-md @(isMobile ? "m-l-sm p-l-sm m-r-sm" : "")" classes="'setting__catalog-popover-custom'" data-title="@T("Admin.Settings.Catalog.ShowQuickView")">
            @T("Admin.SettingsCatalog.CatalogCommon.ShowQuickViewNote")
        </help-trigger>
    </div>
</div>

<div class="form-group row setting__form-group">
    <div class="col-xs-12 col-md-3 col-wl-2">
        <label for="settingsTemplateProductsPerPage" class="control-label">
            @T("Admin.Settings.Catalog.ProductsPerPage")
        </label>
    </div>
    <div class="col-xs-12 col-md-1 flex middle-xs relative">
        @Html.TextBoxFor(x => x.ProductsPerPage, new { id = "settingsTemplateProductsPerPage", @class = "form-control input-small input-alt-mobile", ng_model = "settingsTemplate.ProductsPerPage" })
        <help-trigger class="ng-cloak help-trigger-icon-abs m-l-xs @(isMobile ? "p-l-sm" : "")" data-title="@T("Admin.Settings.Catalog.ProductsPerPage")">
            <div class="help-content">
                @T("Admin.SettingsCatalog.CatalogCommon.OptionDetermines")
            </div>
        </help-trigger>
    </div>
</div>

<div class="form-group row setting__form-group">
    <div class="col-xs-12 col-md-3 col-wl-2">
        <label for="settingsTemplateCountCatalogProductInLine" class="control-label">
            @T("Admin.Settings.Template.CountCatalogProductInLineTitle")
        </label>
    </div>
    <div class="col-xs-12 col-md-1 flex middle-xs relative">
        @Html.TextBoxFor(x => x.CountCatalogProductInLine, new { id = "settingsTemplateCountCatalogProductInLine", @class = "form-control input-small input-alt-mobile", ng_model = "settingsTemplate.CountCatalogProductInLine" })
        <help-trigger class="ng-cloak help-trigger-icon-abs m-l-xs @(isMobile ? "p-l-sm" : "")" classes="'setting__catalog-popover-custom'" data-title="@T("Admin.Settings.Template.CountCatalogProductInLineTitle")">
            <div class="help-content">
                @T("Admin.Settings.Template.CountCatalogProductInLineNote")
            </div>
        </help-trigger>
    </div>
</div>
<div class="form-group setting__form-group" ng-hide="settingsTemplate.isHidden('ShowProductsCount')">
    <div class="row middle-xs @(isMobile ? "" : "control-label")">
        @if (!isMobile)
        {
            <div class="col-xs col-md-3 col-wl-2">
                <label for="settingsTemplateShowProductsCount" class="setting__font-weight--xs">
                    @T("Admin.Settings.Catalog.ShowProductsCount")
                </label>
            </div>
        }
        <div class="relative @(isMobile ? "col-xs" : "col-xs-slim relative flex middle-xs first-xs last-md")">
            <label class="adv-checkbox-label flex">
                @Html.CheckBoxFor(x => x.ShowProductsCount, new { id = "settingsTemplateShowProductsCount", @class = "adv-checkbox-input input-alt-mobile", ng_model = "settingsTemplate.ShowProductsCount" })
                <span class="adv-checkbox-emul" data-e2e="ShowProductsCount"></span>
                @if (isMobile)
                {
                    <span> @T("Admin.Settings.Catalog.ShowProductsCount")</span>
                }
            </label>
        </div>
        <help-trigger class="ng-cloak last-md @(isMobile ? "m-l-sm p-l-sm m-r-sm" : "")" data-title="@T("Admin.Settings.Catalog.ShowProductsCount")">
            <div class="help-content">
                @T("Admin.SettingsCatalog.CatalogCommon.IfOption")<b>@T("Admin.SettingsCatalog.CatalogCommon.IsEnable")</b>@T("Admin.SettingsCatalog.CatalogCommon.InTheClientPart")
            </div>
        </help-trigger>
    </div>
</div>

<div class="form-group setting__form-group" ng-hide="settingsTemplate.isHidden('DisplayCategoriesInBottomMenu')">
    <div class="row middle-xs @(isMobile ? "" : "control-label")">
        @if (!isMobile)
        {
            <div class="col-xs col-md-3 col-wl-2">
                <label for="settingsTemplateShowCategoriesInBottomMenu" class="setting-label-wrap setting__font-weight--xs">
                    @T("Admin.Settings.Catalog.ShowCategoriesInBottomMenu")
                </label>
            </div>
        }
        <div class="relative @(isMobile ? "col-xs" : "col-xs-slim relative flex middle-xs first-xs last-md")">
            <label class="adv-checkbox-label flex">
                @Html.CheckBoxFor(x => x.DisplayCategoriesInBottomMenu, new { id = "settingsTemplateShowCategoriesInBottomMenu", @class = "adv-checkbox-input input-alt-mobile", ng_model = "settingsTemplate.ShowCategoriesInBottomMenu" })
                <span class="adv-checkbox-emul" data-e2e="DisplayCategoriesInBottomMenu"></span>
                @if (isMobile)
                {
                    <span>@T("Admin.Settings.Catalog.ShowCategoriesInBottomMenu")</span>
                }
            </label>
        </div>
        <help-trigger class="ng-cloak last-md @(isMobile ? "m-l-sm p-l-sm m-r-sm" : "")" data-title=" @T("Admin.Settings.Catalog.ShowCategoriesInBottomMenu") ">
            <div class="help-content">
                @T("Admin.SettingsCatalog.CatalogCommon.ShowOrNot")
            </div>
        </help-trigger>
    </div>
</div>

<div class="form-group setting__form-group" ng-hide="settingsTemplate.isHidden('ShowProductArtNo')">
    <div class="row middle-xs @(isMobile ? "" : "control-label")">
        @if (!isMobile)
        {
            <div class="col-xs col-md-3 col-wl-2">
                <label for="settingsTemplateShowProductArtNo" class="setting-label-wrap setting__font-weight--xs">
                    @T("Admin.Settings.Catalog.ShowProductArtNo")
                </label>
            </div>
        }
        <div class="relative @(isMobile ? "col-xs" : "col-xs-slim relative flex middle-xs first-xs last-md")">
            <label class="adv-checkbox-label">
                @Html.CheckBoxFor(x => x.ShowProductArtNo, new { id = "settingsTemplateShowProductArtNo", @class = "adv-checkbox-input input-alt-mobile", ng_model = "settingsTemplate.ShowProductArtNo" })
                <span class="adv-checkbox-emul" data-e2e="ShowProductArtNo"></span>
                @if (isMobile)
                {
                    <span> @T("Admin.Settings.Catalog.ShowProductArtNo")</span>
                }
            </label>
        </div>
        <help-trigger class="ng-cloak last-md @(isMobile ? "m-l-sm p-l-sm m-r-sm" : "")" data-title="@T("Admin.Settings.Catalog.ShowProductArtNo")">
            <div class="help-content">
                @T("Admin.SettingsCatalog.CatalogCommon.ShowArticleInTile")
            </div>
        </help-trigger>
    </div>
</div>

<div class="form-group setting__form-group">
    <div class="row middle-xs @(isMobile ? "" : "control-label")">
        @if (!isMobile)
        {
            <div class="col-xs col-md-3 col-wl-2">
                <label for="settingsTempalateCatalogVisibleBriefDescription" class="control-label">
                    @T("Admin.SettingsCatalog.CatalogCommon.CatalogVisibleBriefDescription")
                </label>
            </div>
        }
        <div class="relative @(isMobile ? "col-xs" : "col-xs-slim relative flex middle-xs first-xs last-md")">
            <label class="adv-checkbox-label flex">
                @Html.CheckBoxFor(x => x.CatalogVisibleBriefDescription, new { id = "settingsTempalateCatalogVisibleBriefDescription", @class = "adv-checkbox-input", ng_model = "settingsTempalate.CatalogVisibleBriefDescription" })
                <span class="adv-checkbox-emul"></span>
                @if (isMobile)
                {
                    <span>@T("Admin.SettingsCatalog.CatalogCommon.CatalogVisibleBriefDescription")</span>
                }
            </label>
        </div>
        <help-trigger class="ng-cloak last-md @(isMobile ? "m-l-sm p-l-sm m-r-sm" : "")" data-title="@T("Admin.SettingsCatalog.CatalogCommon.CatalogVisibleBriefDescription")">
            <div class="help-content">
                @T("Admin.SettingsCatalog.CatalogCommon.CatalogVisibleBriefDescriptionHelp")
            </div>
        </help-trigger>
    </div>
</div>

<div class="form-group setting__form-group" ng-hide="settingsTemplate.isHidden('EnableProductRating')">
    <div class="row middle-xs @(isMobile ? "" : "control-label row-gap-md")">
        @if (!isMobile)
        {
            <div class="col-xs col-md-3 col-wl-2">
                <label for="settingsTemplateEnableProductRating" class="setting-label-wrap setting__font-weight--xs">
                    @T("Admin.Settings.Catalog.EnableProductRating")
                </label>
            </div>
        }
        <div class="relative @(isMobile ? "col-xs" : "col-xs-slim relative flex middle-xs first-xs last-md")">
            <label class="adv-checkbox-label @(isMobile ? "" : "flex")">
                @Html.CheckBoxFor(x => x.EnableProductRating, new { id = "settingsTemplateEnableProductRating", @class = "adv-checkbox-input input-alt-mobile", ng_model = "settingsTemplate.EnableProductRating" })
                <span class="adv-checkbox-emul" data-e2e="EnableProductRating"></span>
                @if (isMobile)
                {
                    <span>@T("Admin.Settings.Catalog.EnableProductRating")</span>
                }
            </label>
        </div>
        <help-trigger class="ng-cloak last-md @(isMobile ? "m-l-sm p-l-sm m-r-sm" : "")" data-title="@T("Admin.Settings.Catalog.EnableProductRating")">
            <div class="help-content">
                @T("Admin.SettingsCatalog.CatalogCommon.ShowOrNotStars")
            </div>
        </help-trigger>


        <div ng-if="settingsTemplate.EnableProductRating" class="flex last-lg @(isMobile ? "flex-grow full-width" : "")" style="@(isMobile ? "margin-top:24px;": "")">
            <div class="col-xs-12 col-md relative">
                <div class="row middle-xs">
                    @if (isMobile)
                    {
                        <div class="col-xs-12 col-md-slim control-label">
                            @T("Admin.Settings.Catalog.SetAllProductsManualRatio"):
                        </div>
                    }
                    else
                    {
                        <label for="settingsTemplateSetAllProductsManualRatio" class="col-xs-12 col-md-slim control-label">
                            @T("Admin.Settings.Catalog.SetAllProductsManualRatio"):
                        </label>
                    }
                    <div class="col-xs col-md-slim flex @(isMobile ? "flex-grow" : "")">
                        <input type="number" id="settingsTemplateSetAllProductsManualRatio" pattern="[0-9]*" class="form-control input-alt-mobile" ng-model="settingsTemplate.ManualRatio" bs-modifiable="false" />
                        <button type="button" class="btn btn-sm btn-action input-group-addon" ng-disabled="settingsTemplate.ManualRatio == null" ng-click="settingsTemplate.setAllProductsManualRatio()">@T("Admin.Settings.Catalog.SetAllProductsManualRatioBtn")</button>
                    </div>
                    <help-trigger class="ng-cloak @(isMobile ? "m-l-sm m-r-sm" : "m-l-xs")" classes="'setting__catalog-popover-custom'" data-title="@T("Admin.Settings.Catalog.SetAllProductsManualRatio")">
                        <div class="help-content">
                            @T("Admin.Settings.Catalog.SetAllProductsManualRatioNote")
                        </div>
                    </help-trigger>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="form-group setting__form-group" ng-hide="settingsTemplate.isHidden('EnableCompareProducts')">
    <div class="row middle-xs @(isMobile ? "" : "control-label")">
        @if (!isMobile)
        {
            <div class="col-xs col-md-3 col-wl-2">
                <label for="settingsTemplateEnableCompareProducts" class="setting__font-weight--xs">
                    @T("Admin.Settings.Catalog.EnableCompareProducts")
                </label>
            </div>
        }
        <div class="relative @(isMobile ? "col-xs" : "col-xs-slim relative flex middle-xs first-xs last-md")">
            <label class="adv-checkbox-label">
                @Html.CheckBoxFor(x => x.EnableCompareProducts, new { id = "settingsTemplateEnableCompareProducts", @class = "adv-checkbox-input input-alt-mobile", ng_model = "settingsTemplate.EnableCompareProducts" })
                <span class="adv-checkbox-emul" data-e2e="EnableCompareProducts"></span>
                @if (isMobile)
                {
                    <span>@T("Admin.Settings.Catalog.EnableCompareProducts")</span>
                }
            </label>
        </div>
        <help-trigger class="ng-cloak last-md @(isMobile ? "m-l-sm p-l-sm m-r-sm" : "")" data-title="@T("Admin.Settings.Catalog.EnableCompareProducts")">
            <div class="help-content">
                @T("Admin.SettingsCatalog.CatalogCommon.DeterminesDisplayOrNot")
            </div>
        </help-trigger>
    </div>
</div>


<div class="form-group setting__form-group" ng-hide="settingsTemplate.isHidden('EnablePhotoPreviews')">
    <div class="row middle-xs @(isMobile ? "" : "control-label")">
        @if (!isMobile)
        {
            <div class="col-xs col-md-3 col-wl-2">
                <label for="settingsTemplateEnablePhotoPreviews" class="setting__font-weight--xs">
                    @T("Admin.Settings.Catalog.EnablePhotoPreviews")
                </label>
            </div>
        }
        <div class="relative @(isMobile ? "col-xs" : "col-xs-slim relative flex middle-xs first-xs last-md")">
            <label class="adv-checkbox-label">
                @Html.CheckBoxFor(x => x.EnablePhotoPreviews, new { id = "settingsTemplateEnablePhotoPreviews", @class = "adv-checkbox-input input-alt-mobile", ng_model = "settingsTemplate.EnablePhotoPreviews" })
                <span class="adv-checkbox-emul" data-e2e="EnablePhotoPreviews"></span>
                @if (isMobile)
                {
                    <span>@T("Admin.Settings.Catalog.EnablePhotoPreviews")</span>
                }
            </label>
        </div>
        <help-trigger class="ng-cloak last-md @(isMobile ? "m-l-sm p-l-sm m-r-sm" : "")" data-title="@T("Admin.Settings.Catalog.EnablePhotoPreviews")">
            <div class="help-content">
                @T("Admin.SettingsCatalog.CatalogCommon.HoverMouseOnProduct")
            </div>
        </help-trigger>
    </div>
</div>

<div class="form-group setting__form-group" ng-hide="settingsTemplate.isHidden('ShowCountPhoto')">
    <div class="row middle-xs @(isMobile ? "" : "control-label")">
        @if (!isMobile)
        {
            <div class="col-xs col-md-3 col-wl-2">
                <label for="settingsTemplateShowCountPhoto" class="setting__font-weight--xs">
                    @T("Admin.Settings.Catalog.ShowCountPhoto")
                </label>
            </div>
        }
        <div class="relative @(isMobile ? "col-xs" : "col-xs-slim relative flex middle-xs first-xs last-md")">
            <label class="adv-checkbox-label">
                @Html.CheckBoxFor(x => x.ShowCountPhoto, new { id = "settingsTemplateShowCountPhoto", @class = "adv-checkbox-input input-alt-mobile", ng_model = "settingsTemplate.ShowCountPhoto" })
                <span class="adv-checkbox-emul" data-e2e="ShowCountPhoto"></span>
                @if (isMobile)
                {
                    <span>@T("Admin.Settings.Catalog.ShowCountPhoto")</span>
                }
            </label>
        </div>
        <help-trigger class="ng-cloak last-md @(isMobile ? "m-l-sm p-l-sm m-r-sm" : "")" data-title="@T("Admin.Settings.Catalog.ShowCountPhoto")">
            <div class="help-content">
                @T("Admin.SettingsCatalog.CatalogCommon.OptionDisplaySmallIcon")
            </div>
        </help-trigger>
    </div>
</div>

<div class="form-group setting__form-group" ng-hide="settingsTemplate.isHidden('ShowOnlyAvalible')">
    <div class="row middle-xs @(isMobile ? "" : "control-label")">
        @if (!isMobile)
        {
            <div class="col-xs col-md-3 col-wl-2">
                <label for="settingsTemplateShowOnlyAvalible" class="setting__font-weight--xs">
                    @T("Admin.Settings.Catalog.ShowOnlyAvalible")
                </label>
            </div>
        }
        <div class="relative @(isMobile ? "col-xs" : "col-xs-slim relative flex middle-xs first-xs last-md")">
            <label class="adv-checkbox-label">
                @Html.CheckBoxFor(x => x.ShowOnlyAvalible, new { id = "settingsTemplateShowOnlyAvalible", @class = "adv-checkbox-input input-alt-mobile", ng_model = "settingsTemplate.ShowOnlyAvalible" })
                <span class="adv-checkbox-emul" data-e2e="ShowOnlyAvalible"></span>
                @if (isMobile)
                {
                    <span>@T("Admin.Settings.Catalog.ShowOnlyAvalible")</span>
                }
            </label>
        </div>
        <help-trigger class="ng-cloak last-md @(isMobile ? "m-l-sm p-l-sm m-r-sm" : "")" data-title="@T("Admin.Settings.Catalog.ShowOnlyAvalible")">
            <div class="help-content">
                @T("Admin.SettingsCatalog.CatalogCommon.OptionToDisplayProductsAreNotAvailable")
            </div>
        </help-trigger>
    </div>
</div>

<div class="form-group setting__form-group" ng-hide="settingsTemplate.isHidden('MoveNotAvaliableToEnd')">
    <div class="row middle-xs @(isMobile ? "" : "control-label")">
        @if (!isMobile)
        {
            <div class="col-xs col-md-3 col-wl-2">
                <label for="settingsTemplateMoveNotAvaliableToEnd" class="setting__font-weight--xs">
                    @T("Admin.Settings.Catalog.MoveNotAvaliableToEnd")
                </label>
            </div>
        }
        <div class="relative @(isMobile ? "col-xs" : "col-xs-slim relative flex middle-xs first-xs last-md")">
            <label class="adv-checkbox-label">
                @Html.CheckBoxFor(x => x.MoveNotAvaliableToEnd, new { id = "settingsTemplateMoveNotAvaliableToEnd", @class = "adv-checkbox-input input-alt-mobile", ng_model = "settingsTemplate.MoveNotAvaliableToEnd" })
                <span class="adv-checkbox-emul" data-e2e="MoveNotAvaliableToEnd"></span>
                @if (isMobile)
                {
                    <span>@T("Admin.Settings.Catalog.MoveNotAvaliableToEnd")</span>
                }
            </label>
        </div>
        <help-trigger class="ng-cloak last-md @(isMobile ? "m-l-sm p-l-sm m-r-sm" : "")" data-title="@T("Admin.Settings.Catalog.MoveNotAvaliableToEnd")">
            <div class="help-content">
                @T("Admin.SettingsCatalog.CatalogCommon.OptionToMoveProductsInTheEndList")
            </div>
        </help-trigger>
    </div>
</div>

<div class="form-group setting__form-group" ng-hide="settingsTemplate.isHidden('ShowNotAvaliableLable')">
    <div class="row middle-xs @(isMobile ? "" : "control-label")">
        @if (!isMobile)
        {
            <div class="col-xs-slim col-md-3 col-wl-2">
                <label for="settingsTemplateShowNotAvaliableLable" class="setting__font-weight--xs">
                    @T("Admin.Settings.Catalog.ShowNotAvaliableLable")
                </label>
            </div>
        }
        <div class="relative @(isMobile ? "col-xs" : "col-xs-slim relative flex middle-xs first-xs last-md")">
            <label class="adv-checkbox-label flex">
                @Html.CheckBoxFor(x => x.ShowNotAvaliableLable, new { id = "settingsTemplateShowNotAvaliableLable", @class = "adv-checkbox-input input-alt-mobile", ng_model = "settingsTemplate.ShowNotAvaliableLable" })
                <span class="adv-checkbox-emul" data-e2e="ShowNotAvaliableLable"></span>
                @if (isMobile)
                {
                    <span>@T("Admin.Settings.Catalog.ShowNotAvaliableLable")</span>
                }
            </label>
        </div>
    </div>
</div>

<div class="form-group setting__form-group">
    <div class="row middle-xs @(isMobile ? "" : "control-label")">
        @if (!isMobile)
        {
            <div class="col-xs-slim col-md-3 col-wl-2">
                <label for="settingsTemplateShowUnitsInCatalog" class="setting__font-weight--xs">
                    @T("Admin.Settings.Catalog.ShowUnitsInCatalog")
                </label>
            </div>
        }
        <div class="relative @(isMobile ? "col-xs" : "col-xs-slim relative flex middle-xs first-xs last-md")">
            <label class="adv-checkbox-label flex">
                @Html.CheckBoxFor(x => x.ShowUnitsInCatalog, new { id = "settingsTemplateShowUnitsInCatalog", @class = "adv-checkbox-input input-alt-mobile", ng_model = "settingsTemplate.ShowUnitsInCatalog" })
                <span class="adv-checkbox-emul"></span>
                @if (isMobile)
                {
                    <span>@T("Admin.Settings.Catalog.ShowUnitsInCatalog")</span>
                }
            </label>
        </div>
    </div>
</div>

<div class="form-group setting__form-group"  ng-hide="settingsTemplate.isHidden('ShowSpinboxInCatalog')">
    <div class="row middle-xs @(isMobile ? "" : "control-label")">
        @if (!isMobile)
        {
            <div class="col-xs-slim col-md-3 col-wl-2">
                <label for="settingsTemplateShowSpinboxInCatalog" class="setting__font-weight--xs">
                    @T("Admin.Settings.Catalog.ShowSpinboxInCatalog")
                </label>
            </div>
        }
        <div class="relative @(isMobile ? "col-xs" : "col-xs-slim relative flex middle-xs first-xs last-md")">
            <label class="adv-checkbox-label flex">
                @Html.CheckBoxFor(x => x.ShowSpinboxInCatalog, new { id = "settingsTemplateShowSpinboxInCatalog", @class = "adv-checkbox-input input-alt-mobile", ng_model = "settingsTemplate.ShowSpinboxInCatalog" })
                <span class="adv-checkbox-emul"></span>
                @if (isMobile)
                {
                    <span>@T("Admin.Settings.Catalog.ShowSpinboxInCatalog")</span>
                }
            </label>
        </div>
    </div>
</div>

@Html.Action("OtherSettings", new { section = AdvantShop.Configuration.ETemplateSettingSection.Category, settings = Model.OtherSettingsSections})

<div class="setting-title setting-title__m-t-md">
    <h3 class="setting__subtitle">@T("Admin.Settings.Catalog.HeadFilters")</h3>
</div>

<div class="form-group setting__form-group">
    <div class="row middle-xs @(isMobile ? "" : "control-label")">
        @if (!isMobile)
        {
            <div class="col-xs col-md-3 col-wl-2 ">
                <label for="settingsTemplateFilterVisibility" class="setting__font-weight--xs">
                    @T("Admin.Settings.Catalog.ShowFilter")
                </label>
            </div>
        }
        <div class="relative  @(isMobile ? "col-xs" : "col-xs-slim relative flex middle-xs first-xs last-md")">
            <label class="adv-checkbox-label flex">
                @Html.CheckBoxFor(x => x.FilterVisibility, new { id = "settingsTemplateFilterVisibility", @class = "adv-checkbox-input input-alt-mobile", ng_model = "settingsTemplate.FilterVisibility" })
                <span class="adv-checkbox-emul" data-e2e="FilterVisibility"></span>
                @if (isMobile)
                {
                    <span>@T("Admin.Settings.Catalog.ShowFilter")</span>
                }
            </label>
        </div>
        <help-trigger class="ng-cloak last-md @(isMobile ? "m-l-sm p-l-sm m-r-sm" : "")" classes="'setting__catalog-popover-custom'" data-title="@T("Admin.Settings.Catalog.ShowFilter")">
            <div class="help-content">
                @T("Admin.SettingsCatalog.CatalogCommon.ShowFilterNote")
            </div>
        </help-trigger>
    </div>
</div>

<div class="form-group setting__form-group">
    <div class="row middle-xs @(isMobile ? "" : "control-label")">
        @if (!isMobile)
        {
            <div class="col-xs col-md-3 col-wl-2">
                <label for="settingsTemplateShowPriceFilter" class="setting__font-weight--xs">
                    @T("Admin.Settings.Catalog.ShowPriceFilter")
                </label>
            </div>
        }
        <div class="relative @(isMobile ? "col-xs" : "col-xs-slim relative flex middle-xs first-xs last-md")">
            <label class="adv-checkbox-label flex">
                @Html.CheckBoxFor(x => x.ShowPriceFilter, new { id = "settingsTemplateShowPriceFilter", @class = "adv-checkbox-input input-alt-mobile", ng_model = "settingsTemplate.ShowPriceFilter" })
                <span class="adv-checkbox-emul" data-e2e="ShowPriceFilter"></span>
                @if (isMobile)
                {
                    <span> @T("Admin.Settings.Catalog.ShowPriceFilter")</span>
                }
            </label>
        </div>
        <help-trigger class="ng-cloak last-md @(isMobile ? "m-l-sm p-l-sm m-r-sm" : "")" data-title="@T("Admin.Settings.Catalog.ShowPriceFilter")">
            <div class="help-content">
                @T("Admin.SettingsCatalog.CatalogCommon.FilterByPrice")
            </div>
        </help-trigger>
    </div>
</div>

<div class="form-group setting__form-group">
    <div class="row middle-xs @(isMobile ? "" : "control-label")">
        @if (!isMobile)
        {
            <div class="col-xs col-md-3 col-wl-2">
                <label for="settingsTemlplateShowProducerFilter" class="setting__font-weight--xs">
                    @T("Admin.Settings.Catalog.ShowProducerFilter")
                </label>
            </div>
        }
        <div class="relative @(isMobile ? "col-xs" : "col-xs-slim relative flex middle-xs first-xs last-md")">
            <label class="adv-checkbox-label flex">
                @Html.CheckBoxFor(x => x.ShowProducerFilter, new { id = "settingsTemlplateShowProducerFilter", @class = "adv-checkbox-input input-alt-mobile", ng_model = "settingsTemplate.ShowProducerFilter" })
                <span class="adv-checkbox-emul" data-e2e="ShowProducerFilter"></span>
                @if (isMobile)
                {
                    <span>@T("Admin.Settings.Catalog.ShowProducerFilter")</span>
                }
            </label>
        </div>
        <help-trigger class="ng-cloak last-md @(isMobile ? "m-l-sm p-l-sm m-r-sm" : "")" data-title="@T("Admin.Settings.Catalog.ShowProducerFilter")">
            <div class="help-content">
                @T("Admin.SettingsCatalog.CatalogCommon.ManufacturersFilter")
            </div>
        </help-trigger>
    </div>
</div>


<div class="form-group setting__form-group">
    <div class="row middle-xs @(isMobile ? "" : "control-label")">
        @if (!isMobile)
        {
            <div class="col-xs col-md-3 col-wl-2">
                <label for="settingsTemplateShowSizeFilter" class="setting__font-weight--xs">
                    @T("Admin.Settings.Catalog.ShowSizeFilter")
                </label>
            </div>
        }
        <div class="relative @(isMobile ? "col-xs" : "col-xs-slim relative flex middle-xs first-xs last-md")">
            <label class="adv-checkbox-label flex">
                @Html.CheckBoxFor(x => x.ShowSizeFilter, new { id = "settingsTemplateShowSizeFilter", @class = "adv-checkbox-input input-alt-mobile", ng_model = "settingsTemplate.ShowSizeFilter" })
                <span class="adv-checkbox-emul" data-e2e="ShowSizeFilter"></span>
                @if (isMobile)
                {
                    <span>@T("Admin.Settings.Catalog.ShowSizeFilter")</span>
                }
            </label>
        </div>
        <help-trigger class="ng-cloak last-md @(isMobile ? "m-l-sm p-l-sm m-r-sm" : "")" data-title="@T("Admin.Settings.Catalog.ShowSizeFilter")">
            <div class="help-content">
                @T("Admin.SettingsCatalog.CatalogCommon.FilterBySize")
            </div>
        </help-trigger>
    </div>
</div>

<div class="form-group setting__form-group">
    <div class="row middle-xs @(isMobile ? "" : "control-label")">
        @if (!isMobile)
        {
            <div class="col-xs col-md-3 col-wl-2">
                <label for="settingsTemplateShowColorFilter" class="setting__font-weight--xs">
                    @T("Admin.Settings.Catalog.ShowColorFilter")
                </label>
            </div>
        }
        <div class="relative @(isMobile ? "col-xs" : "col-xs-slim relative flex middle-xs first-xs last-md")">
            <label class="adv-checkbox-label flex">
                @Html.CheckBoxFor(x => x.ShowColorFilter, new { id = "settingsTemplateShowColorFilter", @class = "adv-checkbox-input input-alt-mobile", ng_model = "settingsTemplate.ShowColorFilter" })
                <span class="adv-checkbox-emul" data-e2e="ShowColorFilter"></span>
                @if (isMobile)
                {
                    <span>@T("Admin.Settings.Catalog.ShowColorFilter")</span>
                }
            </label>

        </div>
        <help-trigger class="ng-cloak last-md @(isMobile ? "m-l-sm p-l-sm m-r-sm" : "")" data-title="@T("Admin.Settings.Catalog.ShowColorFilter")">
            <div class="help-content">
                @T("Admin.SettingsCatalog.CatalogCommon.FilterByColor")<br>
                @T("Admin.SettingsCatalog.CatalogCommon.ColorsDisplayedLikeCubes")
            </div>
        </help-trigger>
    </div>
</div>


<div class="form-group setting__form-group" data-ng-if="@AdvantShop.Saas.SaasDataService.IsEnabledFeature((saas => saas.HasWarehouses)).ToLowerString()">
    <div class="row middle-xs @(isMobile ? "" : "control-label")">
        @if (!isMobile)
        {
    <div class="col-xs col-md-3 col-wl-2">
        <label for="settingsTemplateShowWarehouseFilter" class="setting__font-weight--xs">
            @T("Admin.Settings.Catalog.ShowWarehouseFilter")
        </label>
    </div>
        }
        <div class="relative @(isMobile ? "col-xs" : "col-xs-slim relative flex middle-xs first-xs last-md")">
            <label class="adv-checkbox-label flex">
                @Html.CheckBoxFor(x => x.ShowWarehouseFilter, new { id = "settingsTemplateShowWarehouseFilter", @class = "adv-checkbox-input input-alt-mobile", ng_model = "settingsTemplate.ShowWarehouseFilter" })
                <span class="adv-checkbox-emul" data-e2e="ShowWarehouseFilter"></span>
                @if (isMobile)
                {
            <span>@T("Admin.Settings.Catalog.ShowWarehouseFilter")</span>
                }
            </label>
        </div>
        <help-trigger class="ng-cloak last-md @(isMobile ? "m-l-sm p-l-sm m-r-sm" : "")" data-title="@T("Admin.Settings.Catalog.ShowWarehouseFilter")">
            <div class="help-content">
                @T("Admin.SettingsCatalog.CatalogCommon.FilterByWarehouse")
            </div>
        </help-trigger>
    </div>
</div>

<div class="form-group setting__form-group">
    <div class="row flex-nowrap middle-xs @(isMobile ? "" : "control-label")">
        @if (!isMobile)
        {
            <div class="col-xs col-md-3 col-wl-2 flex-shrink-1">
                <label for="settingsTemplateShowPropertiesFilterInProductList" class="setting__font-weight--xs">
                    @T("Admin.Settings.Catalog.ShowPropertiesFilterInProductList")
                </label>
            </div>
        }
        <div class="relative @(isMobile ? "col-xs" : "col-xs-slim relative flex middle-xs first-xs last-md")">
            <label class="adv-checkbox-label">
                @Html.CheckBoxFor(x => x.ShowPropertiesFilterInProductList, new { id = "settingsTemplateShowPropertiesFilterInProductList", @class = "adv-checkbox-input input-alt-mobile", ng_model = "settingsTemplate.ShowPropertiesFilterInProductList" })
                <span class="adv-checkbox-emul" data-e2e="ShowPropertiesFilterInProductList"></span>
                @if (isMobile)
                {
                    <span>@T("Admin.Settings.Catalog.ShowPropertiesFilterInProductList")</span>
                }
            </label>
        </div>
        <help-trigger class="ng-cloak last-md @(isMobile ? "m-l-sm p-l-sm m-r-sm" : "")" data-title="@T("Admin.Settings.Catalog.ShowPropertiesFilterInProductList")">
            <div class="help-content">
                @T("Admin.SettingsCatalog.CatalogCommon.ShowPropertiesFilterInProductListNote")
            </div>
        </help-trigger>
    </div>
</div>

<div class="form-group setting__form-group">
    <div class="row flex-nowrap middle-xs @(isMobile ? "" : "control-label")">
        @if (!isMobile)
        {
            <div class="col-xs col-md-3 col-wl-2 flex-shrink-1">
                <label for="settingsTemplateShowPropertiesFilterInParentCategories" class="setting__font-weight--xs">
                    @T("Admin.Settings.Catalog.ShowPropertiesFilterInParentCategories")
                </label>
            </div>
        }
        <div class="relative @(isMobile ? "col-xs" : "col-xs-slim relative flex middle-xs first-xs last-md")">
            <label class="adv-checkbox-label">
                @Html.CheckBoxFor(x => x.ShowPropertiesFilterInParentCategories, new { id = "settingsTemplateShowPropertiesFilterInParentCategories", @class = "adv-checkbox-input input-alt-mobile", ng_model = "settingsTemplate.ShowPropertiesFilterInParentCategories" })
                <span class="adv-checkbox-emul" data-e2e="ShowPropertiesFilterInParentCategories"></span>
                @if (isMobile)
                {
                    <span>@T("Admin.Settings.Catalog.ShowPropertiesFilterInParentCategories")</span>
                }
            </label>
        </div>
        <help-trigger class="ng-cloak last-md @(isMobile ? "m-l-sm p-l-sm m-r-sm" : "")" data-title="@T("Admin.Settings.Catalog.ShowPropertiesFilterInParentCategories")">
            <div class="help-content">
                @T("Admin.SettingsCatalog.CatalogCommon.ShowPropertiesFilterInParentCategoriesNote")
            </div>
        </help-trigger>
    </div>
</div>

<div class="form-group setting__form-group">
    <div class="row flex-nowrap middle-xs @(isMobile ? "" : "control-label")">
        @if (!isMobile)
        {
            <div class="col-xs col-md-3 col-wl-2">
                <label for="settingsTemplateExluderingFilters" class="setting__font-weight--xs">
                    @T("Admin.Settings.Catalog.ExluderingFilters")
                </label>
            </div>
        }
        <div class="relative @(isMobile ? "col-xs" : "col-xs-slim relative flex middle-xs first-xs last-md")">
            <label class="adv-checkbox-label flex">
                @Html.CheckBoxFor(x => x.ExcludingFilters, new { id = "settingsTemplateExluderingFilters", @class = "adv-checkbox-input input-alt-mobile", ng_model = "settingsTemplate.ExluderingFilters" })
                <span class="adv-checkbox-emul" data-e2e="ExcludingFilters"></span>
                @if (isMobile)
                {
                    <span>@T("Admin.Settings.Catalog.ExluderingFilters")</span>
                }
            </label>
        </div>
        <help-trigger class="ng-cloak last-md @(isMobile ? "m-l-sm p-l-sm m-r-sm" : "")" data-title="@T("Admin.Settings.Catalog.ExluderingFiltersHote")">
            <div class="help-content">
                @T("Admin.SettingsCatalog.CatalogCommon.MarkedGray")<br>
                <br>
                @T("Admin.SettingsCatalog.CatalogCommon.AllowsToUnderstand")<br>
                <br>
                @T("Admin.SettingsCatalog.CatalogCommon.OptionRequiresMoreResources")
            </div>
        </help-trigger>
    </div>
</div>


<div class="setting-title setting-title__m-t-md">
    <h3 class="setting__subtitle">@T("Admin.Settings.Catalog.Colors")</h3>
</div>

<div class="form-group row setting__form-group">
    <div class="col-xs-12 col-md-3 col-wl-2">
        <label for="settingsTemplateColorsHeader" class="control-label">
            @T("Admin.Settings.Catalog.ColorsHeader")
        </label>
    </div>
    <div class="col-xs-12 col-md-4 flex middle-xs relative">
        @Html.TextBoxFor(x => x.ColorsHeader, new { id = "settingsTemplateColorsHeader", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.ColorsHeader" })
        <help-trigger class="ng-cloak help-trigger-icon-abs m-l-xs @(isMobile ? "p-l-sm" : "")" data-title='@T("Admin.Settings.Catalog.ColorsHeader")'>
            <div class="help-content">
                @T("Admin.SettingsCatalog.CatalogCommon.SpecifyNameForColor")
                <br>
                @T("Admin.SettingsCatalog.CatalogCommon.ExampleTexture")
                <br><br>
                @T("Admin.Settings.Catalog.ColorsHeaderLink")
            </div>
        </help-trigger>
    </div>
</div>

<div class="form-group row setting__form-group">
    <div class="col-xs-12 col-md-3 col-wl-2">
        <label for="settingsTemplatesColorsViewMode" class="control-label">
            @T("Admin.Settings.Catalog.ColorsViewMode")
        </label>
    </div>
    <div class="col-xs-12 col-md-4 flex middle-xs relative @(isMobile ? "p-r-xs" : "")">
        @Html.DropDownListFor(x => x.ColorsViewMode, Model.ColorsViewModes, new { id = "settingsTemplatesColorsViewMode", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.ColorsViewMode" })
        <help-trigger class="ng-cloak help-trigger-icon-abs m-l-xs @(isMobile ? "p-l-sm p-r-xs" : "")" data-title='@T("Admin.Settings.Catalog.ColorsViewMode")'>
            <div class="help-content">
                @T("Admin.Settings.Catalog.ColorsViewModeHint")
            </div>
        </help-trigger>
    </div>
</div>

<div class="form-group row setting__form-group">
    <div class="col-xs-12 col-md-3 col-wl-2">
        <label for="settingsTemplatesColorsViewMode" class="control-label">
            @T("Admin.Settings.Catalog.SizesColorsDisplayMode")
        </label>
    </div>
    <div class="col-xs-12 col-md-4 flex middle-xs relative @(isMobile ? "p-r-xs" : "")">
        @Html.DropDownListFor(x => x.ColorsControlType, Model.SizesColorsControlTypesOptions, new { id = "settingsTemplatesColorsControlType", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.ColorsControlType" })
    </div>
</div>

<div class="form-group row setting__form-group">
    <div class="col-xs-12 col-md-3 col-wl-2">
        <div class="control-label">
            @T("Admin.Settings.Template.ColorsPictureInCatalog")
        </div>
    </div>
    <div class="col-xs-6 col-md-2">
        <label for="settingsTemplateColorsPictureWidth" class="@(isMobile ? "block m-b-sm" : "control-label m-b-xs")">
            @T("Admin.Settings.Template.Width")
        </label>
        <div class="input-group m-b-sm flex middle-xs @(isMobile ? "flex-nowrap flex-grow" : "")">
            @if (isMobile)
            {
                @Html.TextBoxFor(x => x.ColorIconWidthCatalog, new { id = "settingsTemplateColorsPictureWidth", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.ColorIconWidthCatalog", type = "number", min = "10", max = "1000", style = "", validation_input_text = T("Admin.Settings.Catalog.ColorsPictureWidth") })
            }
            else
            {
                @Html.TextBoxFor(x => x.ColorIconWidthCatalog, new { id = "settingsTemplateColorsPictureWidth", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.ColorIconWidthCatalog", type = "number", min = "10", max = "1000", style = "width:120px;", validation_input_text = T("Admin.Settings.Catalog.ColorsPictureWidth") })
            }
            <span class="col-xs-slim">px</span>&nbsp;
        </div>
    </div>
    <div class="col-xs-6 col-md-2">
        <label for="settingsTemplateColorIconHeightCatalog" class="@(isMobile ? "block m-b-sm setting__font-weight--xs" : "control-label m-b-xs")">
            @T("Admin.Settings.Template.Height")
        </label>
        <div class="flex middle-xs">
            <div class="input-group flex middle-xs @(isMobile ? "flex-nowrap flex-grow" : "")">
                @if (isMobile)
                {
                    @Html.TextBoxFor(x => x.ColorIconHeightCatalog, new { id = "settingsTemplateColorIconHeightCatalog", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.ColorIconHeightCatalog", type = "number", min = "10", max = "1000", style = "", validation_input_text = T("Admin.Settings.Catalog.ColorsPictureHeight") })
                }
                else
                {
                    @Html.TextBoxFor(x => x.ColorIconHeightCatalog, new { id = "settingsTemplateColorIconHeightCatalog", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.ColorIconHeightCatalog", type = "number", min = "10", max = "1000", style = "width:120px;", validation_input_text = T("Admin.Settings.Catalog.ColorsPictureHeight") })
                }
                <span class="col-xs-slim">px</span>
            </div>
            <help-trigger class="ng-cloak m-l-xs" data-title="@T("Admin.Settings.Template.ColorsPictureInCatalog")">
                <div class="help-content">
                    @T("Admin.Settings.Template.ColorsPictureHelp")
                    <br /><br />
                    @T("Admin.Settings.Template.ColorsPictureHelpLink")
                </div>
            </help-trigger>
        </div>
    </div>
</div>

<div class="form-group row setting__form-group">
    <div class="col-xs-12 col-md-3 col-wl-2">
        <div class="control-label">
            @T("Admin.Settings.Template.ColorsPictureInDetails")
        </div>
    </div>
    <div class="col-xs-6 col-md-2">
        <label for="settingsTemplatesColorIconWidthDetails" class="@(isMobile ? "block m-b-sm" : "control-label m-b-xs")">
            @T("Admin.Settings.Template.Width")
        </label>
        <div class="input-group m-b-sm flex middle-xs @(isMobile ? "flex-nowrap flex-grow" : "")">
            @if (isMobile)
            {
                @Html.TextBoxFor(x => x.ColorIconWidthDetails, new { id = "settingsTemplatesColorIconWidthDetails", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.ColorIconWidthDetails", type = "number", min = "10", max = "1000", style = "", validation_input_text = T("Admin.Settings.Catalog.ColorsPictureWidth") })
            }
            else
            {
                @Html.TextBoxFor(x => x.ColorIconWidthDetails, new { id = "settingsTemplatesColorIconWidthDetails", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.ColorIconWidthDetails", type = "number", min = "10", max = "1000", style = "width:120px;", validation_input_text = T("Admin.Settings.Catalog.ColorsPictureWidth") })
            }
            <span class="col-xs-slim">px</span>&nbsp;
        </div>
    </div>
    <div class="col-xs-6 col-md-2">
        <label for="settingsTemplatesColorIconHeightDetails" class="@(isMobile ? "block m-b-sm setting__font-weight--xs" : "control-label m-b-xs")">
            @T("Admin.Settings.Template.Height")
        </label>
        <div class="flex middle-xs">
            <div class="input-group flex middle-xs @(isMobile ? "flex-nowrap flex-grow" : "")">
                @if (isMobile)
                {
                    @Html.TextBoxFor(x => x.ColorIconHeightDetails, new { id = "settingsTemplatesColorIconHeightDetails", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.ColorIconHeightDetails", type = "number", min = "10", max = "1000", style = "", validation_input_text = T("Admin.Settings.Catalog.ColorsPictureHeight") })
                }
                else
                {
                    @Html.TextBoxFor(x => x.ColorIconHeightDetails, new { id = "settingsTemplatesColorIconHeightDetails", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.ColorIconHeightDetails", type = "number", min = "10", max = "1000", style = "width:120px;", validation_input_text = T("Admin.Settings.Catalog.ColorsPictureHeight") })
                }
                <span class="col-xs-slim">px</span>
            </div>
            <help-trigger class="ng-cloak m-l-xs" data-title="@T("Admin.Settings.Template.ColorsPictureInDetails")">
                <div class="help-content">
                    @T("Admin.Settings.Template.ColorsPictureHelp")
                    <br /><br />
                    @T("Admin.Settings.Template.ColorsPictureHelpLink")
                </div>
            </help-trigger>
        </div>
    </div>
</div>

<div class="setting-title setting-title__m-t-md">
    <h3 class="setting__subtitle">@T("Admin.Settings.Catalog.Sizes")</h3>
</div>

<div class="form-group row setting__form-group">
    <div class="col-xs-12 col-md-3 col-wl-2">
        <label for="settingsTemplatesSizesHeader" class="control-label">
            @T("Admin.Settings.Catalog.SizesHeader")
        </label>
    </div>
    <div class="col-xs-12 col-md-4 flex middle-xs relative">
        @Html.TextBoxFor(x => x.SizesHeader, new { id = "settingsTemplatesSizesHeader", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.SizesHeader" })
        <help-trigger class="ng-cloak help-trigger-icon-abs m-l-xs @(isMobile ? "p-l-sm" : "")" data-title='@T("Admin.Settings.Catalog.SizesHeader")'>
            <div class="help-content">
                @T("Admin.SettingsCatalog.CatalogCommon.SpecifyNameForSize")
                <br>
                @T("Admin.SettingsCatalog.CatalogCommon.ExampleVolume")
                <br><br>
                @T("Admin.Settings.Catalog.SizesHeaderLink")
            </div>
        </help-trigger>
    </div>
</div>

<div class="form-group row setting__form-group">
    <div class="col-xs-12 col-md-3 col-wl-2">
        <label for="settingsTemplatesColorsViewMode" class="control-label">
            @T("Admin.Settings.Catalog.SizesColorsDisplayMode")
        </label>
    </div>
    <div class="col-xs-12 col-md-4 flex middle-xs relative @(isMobile ? "p-r-xs" : "")">
        @Html.DropDownListFor(x => x.SizesControlType, Model.SizesColorsControlTypesOptions, new { id = "settingsTemplatesSizesControlType", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.SizessControlType" })
    </div>
</div>

<div class="form-group setting__form-group">
    <div class="row flex-nowrap middle-xs @(isMobile ? "" : "control-label")">
        @if (!isMobile)
        {
            <div class="col-xs-slim col-md-3 col-wl-2 flex-shrink-1">
                <label for="settingsTemplateComplexFilter" class="setting__font-weight--xs">
                    @T("Admin.Settings.Catalog.ComplexFilter")
                </label>
            </div>
        }
        <div class="relative @(isMobile ? "col-xs" : "col-xs-slim relative flex middle-xs first-xs last-md")">
            <label class="adv-checkbox-label">
                @Html.CheckBoxFor(x => x.ComplexFilter, new { id = "settingsTemplateComplexFilter", @class = "adv-checkbox-input input-alt-mobile", ng_model = "settingsTemplate.ComplexFilter" })
                <span class="adv-checkbox-emul" data-e2e="ComplexFilter"></span>
                @if (isMobile)
                {
                    <span>@T("Admin.Settings.Catalog.ComplexFilter")</span>
                }
            </label>
        </div>
        <help-trigger class="ng-cloak last-md @(isMobile ? "m-l-sm p-l-sm m-r-sm" : "")" data-title="@T("Admin.Settings.Catalog.ComplexFilterHote")">
            <div class="help-content">
                @T("Admin.SettingsCatalog.CatalogCommon.PhotoCorrespondingSelectedColor")
                <br>
                <br>
                @T("Admin.SettingsCatalog.CatalogCommon.ThisOptionRequiers")
                <br>
                <br>
                @T("Admin.Settings.Catalog.ComplexFilterLink")
            </div>
        </help-trigger>
    </div>
</div>
<div class="setting-title setting-title__m-t-md">
    <h3 class="setting__subtitle">@T("Admin.Settings.Catalog.ButtonText")</h3>
</div>

<div class="form-group row setting__form-group">
    <div class="col-xs-12 col-md-3 col-wl-2">
        <label for="settingsTemplateDisplayBuyButton" class="control-label">
            @T("Admin.Settings.Catalog.BuyButtonText")
        </label>
    </div>
    <div class="col-xs-12 col-md-4 setting__form-group">
        @Html.TextBoxFor(x => x.BuyButtonText, new { id = "settingsTemplateDisplayBuyButton", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.BuyButtonText" })
    </div>
    <div class="col-xs-12">
        <div class="row middle-xs">
            <div class="col-xs-12 col-md-offset-3 flex middle-xs col-wl-offset-2 control-label @(isMobile ? "flex-grow setting--m-b-none " : "m-t-xs")">
                <label class="adv-checkbox-label flex col-xs-slim @(isMobile ? "flex-grow setting--m-b-none setting__font-weight--xs" : "m-t-xs")">
                    @Html.CheckBoxFor(x => x.DisplayBuyButton, new { @class = "adv-checkbox-input", ng_model = "settingsTemplate.DisplayBuyButton" })
                    <span class="adv-checkbox-emul" data-e2e="DisplayBuyButton"></span>
                    <span>@T("Admin.Settings.Catalog.DisplayButton")</span>
                </label>
                <help-trigger class="ng-cloak m-l-xs @(isMobile ? "m-l-sm p-l-sm" : "")" data-title="@T("Admin.Settings.Catalog.DisplayButton")">
                    <div class="help-content">
                        @T("Admin.SettingsCatalog.CatalogCommon.ShowAddButton")<br>
                        <br>
                        @T("Admin.SettingsCatalog.CatalogCommon.OwnTextForButton")<br>
                        <br>
                        @T("Admin.SettingsCatalog.CatalogCommon.ExampleBuy")
                    </div>
                </help-trigger>
            </div>
        </div>
    </div>
</div>


<div class="form-group row setting__form-group">
    <div class="col-xs-12 col-md-3 col-wl-2">
        <label for="settingsTemplatePreOrderButtonText" class="control-label">
            @T("Admin.Settings.Catalog.PreOrderButtonText")
        </label>
    </div>
    <div class="col-xs-12 col-md-4 setting__form-group">
        @Html.TextBoxFor(x => x.PreOrderButtonText, new { id = "settingsTemplatePreOrderButtonText", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.PreOrderButtonText" })
    </div>
    <div class="col-xs-12">
        <div class="row middle-xs">
            <div class="col-xs-12 col-md-offset-3 flex col-wl-offset-2 control-label @(isMobile ? "flex-grow setting--m-b-none middle-xs" : "m-t-xs")">
                <label class="adv-checkbox-label flex col-xs @(isMobile ? "flex-grow setting--m-b-none setting__font-weight--xs" : "m-t-xs")">
                    @Html.CheckBoxFor(x => x.DisplayPreOrderButton, new { @class = "adv-checkbox-input", ng_model = "settingsTemplate.DisplayPreOrderButton" })
                    <span class="adv-checkbox-emul" data-e2e="DisplayPreOrderButton"></span>
                    <span class="@(isMobile ? "flex-grow" : "")">@T("Admin.Settings.Catalog.DisplayButton")</span>
                </label>
                <help-trigger class="ng-cloak m-l-xs @(isMobile ? "m-l-sm p-l-sm" : "")" style="@(isMobile ? "" : "margin-top:7px;")" data-title="@T("Admin.Settings.Catalog.DisplayButton")">
                    <div class="help-content">
                        @T("Admin.SettingsCatalog.CatalogCommon.ShowButtonForOrder")<br>
                        <br>
                        @T("Admin.SettingsCatalog.CatalogCommon.OwnTextForButton")<br>
                        <br>
                        @T("Admin.SettingsCatalog.CatalogCommon.ExampleOrder")
                    </div>
                </help-trigger>
            </div>
        </div>
    </div>
</div>


@if (template != "Clothing")
{
<div class="setting-title setting-title__m-t-md">
    <h3 class="setting__subtitle">@T("Admin.Settings.Catalog.CatalogView")</h3>
</div>

<div class="form-group row setting__form-group">
    <div class="col-xs-12 col-md-3 col-wl-2">
        <label for="settingsTemplateDefaultCatalogView" class="control-label">
            @T("Admin.Settings.Catalog.DefaultCatalogView")
        </label>
    </div>
    <div class="col-xs-12 col-md-4 relative setting__form-group">
        @Html.DropDownListFor(x => x.DefaultCatalogView, Model.DefaultViewList, new { id = "settingsTemplateDefaultCatalogView", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.DefaultCatalogView" })
    </div>
    <div class="col-xs-12">
        <div class="row middle-xs">
            <div class="col-xs-12 col-md-offset-3 flex col-wl-offset-2 control-label  @(isMobile ? "flex-grow setting--m-b-none middle-xs" : "m-t-xs")">
                <label class="adv-checkbox-label flex col-xs @(isMobile ? "flex-grow setting--m-b-none setting__font-weight--xs" : "m-t-xs")">
                    @Html.CheckBoxFor(x => x.EnableCatalogViewChange, new { @class = "adv-checkbox-input", ng_model = "settingsTemplate.EnableCatalogViewChange" })
                    <span class="adv-checkbox-emul" data-e2e="EnableCatalogViewChange"></span>
                    <span class="@(isMobile ? "flex-grow" : "")"> @T("Admin.Settings.Catalog.EnableCatalogViewChange")</span>
                </label>
                <help-trigger class="ng-cloak m-l-xs @(isMobile ? "m-l-sm p-l-sm" : "")" style="@(isMobile ? "" : "margin-top:7px;")" data-title="@T("Admin.Settings.Catalog.EnableCatalogViewChange")">
                    <div class="help-content">
                        @T("Admin.SettingsCatalog.CatalogCommon.KindOfDisplayForProducts")
                    </div>
                </help-trigger>
            </div>
        </div>
    </div>
</div>
<div class="form-group row setting__form-group">
    <div class="col-xs-12 col-md-3 col-wl-2">
        <label for="settingsTemplateEnableSearchViewChange" class="control-label">
            @T("Admin.Settings.Catalog.DefaultSearchView")
        </label>
    </div>
    <div class="col-xs-12 col-md-4 setting__form-group">
        @Html.DropDownListFor(x => x.DefaultSearchView, Model.DefaultViewList, new { id = "settingsTemplateEnableSearchViewChange", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.DefaultSearchView" })
    </div>
    <div class="col-xs-12">
        <div class="row middle-xs">
            <div class="col-xs-12 col-md-offset-3 flex col-wl-offset-2 control-label @(isMobile ? "flex-grow setting--m-b-none middle-xs setting__font-weight--xs" : "m-t-xs")">
                <label class="adv-checkbox-label flex col-xs @(isMobile ? "flex-grow setting--m-b-none" : "m-t-xs")">
                    @Html.CheckBoxFor(x => x.EnableSearchViewChange, new { @class = "adv-checkbox-input", ng_model = "settingsTemplate.EnableSearchViewChange" })
                    <span class="adv-checkbox-emul" data-e2e="EnableSearchViewChange"></span>
                    <span>@T("Admin.Settings.Catalog.EnableCatalogViewChange")</span>
                </label>
                <help-trigger class="ng-cloak m-l-xs @(isMobile ? "m-l-sm p-l-sm" : "")" style="@(isMobile ? "" : "margin-top:7px;")" data-title="@T("Admin.Settings.Catalog.EnableCatalogViewChange")">
                    <div class="help-content">
                        @T("Admin.SettingsCatalog.CatalogCommon.KindOfDisplayForResults")
                    </div>
                </help-trigger>
            </div>
        </div>
    </div>
</div>

}

<div class="form-group row setting__form-group" style="@(isMobile ? "" : "margin-top: 33px;")">
    <div class="col-xs-12 col-md-3 col-wl-2">
        <h3 class="setting__subtitle" style="margin-top: 0">@T("Admin.Design.Index.ResizeGoodsPicturesTitle")</h3>
    </div>
    <div class="col-xs-12 col-md-4 relative @(isMobile ? "flex" : "")">
        <a class="" href="" ng-if="!settingsTemplate.startResizePictures" ng-click="settingsTemplate.resizePictures()">@T("Admin.Design.Index.ResizeGoodsPictures")</a>
        <cm-stat class="full-width" ng-if="settingsTemplate.startResizePictures" data-on-finish="cmStat.deleteObsevarable()" on-tick="settingsTemplate.cmStatOnTick(data)">
            <uib-progressbar max="cmStat.entity.Total" value="cmStat.entity.Processed">
                <span style="color:white; white-space:nowrap;"><span ng-bind="cmStat.entity.Processed"></span> / <span ng-bind="cmStat.entity.Total"></span></span>
            </uib-progressbar>
        </cm-stat>
        <help-trigger ng-if="!settingsTemplate.startResizePictures" class="ng-cloak m-l-xs @(isMobile ? "flex end-xs flex-grow" : "")" classes="'setting__catalog-popover-custom'" data-title="@T("Admin.Design.Index.ResizeGoodsPictures")">
            @T("Admin.SettingsCatalog.CatalogCommon.ResizeGoodsPicturesNote")
        </help-trigger>
    </div>
</div>

<div class="form-group row setting__form-group">
    <div class="col-xs-12 col-md-3 col-wl-2">
        <div class="control-label">
            @T("Admin.Settings.Template.BigProductImage")
        </div>
    </div>
    <div class="col-xs-6 col-md-2">
        <label for="settingsTemplateBigProductImageWidth" class="@(isMobile ? "block m-b-sm" : "control-label m-b-xs")">
            @T("Admin.Settings.Template.Width")
        </label>
        <div class="input-group flex middle-xs m-b-sm">
            @if (isMobile)
            {
                @Html.TextBoxFor(x => x.BigProductImageWidth, new { id = "settingsTemplateBigProductImageWidth", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.BigProductImageWidth", type = "number", min = "10", max = "100000", style = "", validation_input_text = T("Admin.Settings.Template.BigProductImage") })
            }
            else
            {
                @Html.TextBoxFor(x => x.BigProductImageWidth, new { id = "settingsTemplateBigProductImageWidth", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.BigProductImageWidth", type = "number", min = "10", max = "100000", style = "width:120px;", validation_input_text = T("Admin.Settings.Template.BigProductImage") })
            }
            <span class="col-xs-slim">px</span>&nbsp;
        </div>
    </div>
    <div class="col-xs-6 col-md-2">
        <labell for="settingsTemplateBigProductImageHeight" class="@(isMobile ? "block m-b-sm" : "control-label m-b-xs")">
            @T("Admin.Settings.Template.Height")
        </labell>
        <div class="input-group flex middle-xs">
            @if (isMobile)
            {
                @Html.TextBoxFor(x => x.BigProductImageHeight, new { id = "settingsTemplateBigProductImageHeight", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.BigProductImageHeight", type = "number", min = "10", max = "100000", style = "", validation_input_text = T("Admin.Settings.Template.BigProductImage") })
            }
            else
            {
                @Html.TextBoxFor(x => x.BigProductImageHeight, new { id = "settingsTemplateBigProductImageHeight", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.BigProductImageHeight", type = "number", min = "10", max = "100000", style = "width:120px;", validation_input_text = T("Admin.Settings.Template.BigProductImage") })
            }
            <span class="col-xs-slim">px</span>
        </div>
    </div>
</div>

<div class="form-group row setting__form-group">
    <div class="col-xs-12 col-md-3 col-wl-2">
        <div class="control-label">
            @T("Admin.Settings.Template.MiddleProductImage")
        </div>
    </div>
    <div class="col-xs-6 col-md-2">
        <label for="settingsTemplateMiddleProductImageWidth" class="@(isMobile ? "block m-b-sm" : "control-label m-b-xs")">
            @T("Admin.Settings.Template.Width")
        </label>
        <div class="input-group flex middle-xs m-b-sm">
            @if (isMobile)
            {
                @Html.TextBoxFor(x => x.MiddleProductImageWidth, new { id = "settingsTemplateMiddleProductImageWidth", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.MiddleProductImageWidth", type = "number", min = "10", max = "100000", style = "", validation_input_text = T("Admin.Settings.Template.MiddleProductImage") })
            }
            else
            {
                @Html.TextBoxFor(x => x.MiddleProductImageWidth, new { id = "settingsTemplateMiddleProductImageWidth", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.MiddleProductImageWidth", type = "number", min = "10", max = "100000", style = "width:120px;", validation_input_text = T("Admin.Settings.Template.MiddleProductImage") })
            }
            <span class="col-xs-slim">px</span>&nbsp;
        </div>
    </div>
    <div class="col-xs-6 col-md-2">
        <label for="settingsTemplateMiddleProductImageHeight" class="@(isMobile ? "block m-b-sm" : "control-label m-b-xs")">
            @T("Admin.Settings.Template.Height")
        </label>
        <div class="input-group flex middle-xs">
            @if (isMobile)
            {
                @Html.TextBoxFor(x => x.MiddleProductImageHeight, new { id = "settingsTemplateMiddleProductImageHeight", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.MiddleProductImageHeight", type = "number", min = "10", max = "100000", style = "", validation_input_text = T("Admin.Settings.Template.MiddleProductImage") })
            }
            else
            {
                @Html.TextBoxFor(x => x.MiddleProductImageHeight, new { id = "settingsTemplateMiddleProductImageHeight", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.MiddleProductImageHeight", type = "number", min = "10", max = "100000", style = "width:120px;", validation_input_text = T("Admin.Settings.Template.MiddleProductImage") })
            }
            <span class="col-xs-slim">px</span>
        </div>
    </div>
</div>

<div class="form-group row setting__form-group">
    <div class="col-xs-12 col-md-3 col-wl-2">
        <div class="control-label">
            @T("Admin.Settings.Template.SmallProductImage")
        </div>
    </div>
    <div class="col-xs-6 col-md-2">
        <label for="settingsTemplateSmallProductImageWidth" class="@(isMobile ? "block m-b-sm" : "control-label m-b-xs")">
            @T("Admin.Settings.Template.Width")
        </label>
        <div class="input-group flex middle-xs m-b-sm">
            @if (isMobile)
            {
                @Html.TextBoxFor(x => x.SmallProductImageWidth, new { id = "settingsTemplateSmallProductImageWidth", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.SmallProductImageWidth", type = "number", min = "10", max = "100000", style = "", validation_input_text = T("Admin.Settings.Template.SmallProductImage") })
            }
            else
            {
                @Html.TextBoxFor(x => x.SmallProductImageWidth, new { id = "settingsTemplateSmallProductImageWidth", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.SmallProductImageWidth", type = "number", min = "10", max = "100000", style = "width:120px;", validation_input_text = T("Admin.Settings.Template.SmallProductImage") })
            }
            <span class="col-xs-slim">px</span>&nbsp;
        </div>
    </div>
    <div class="col-xs-6 col-md-2">
        <label for="settingsTemplateSmallProductImageHeight" class="@(isMobile ? "block m-b-sm" : "control-label m-b-xs")">
            @T("Admin.Settings.Template.Height")
        </label>
        <div class="input-group flex middle-xs">
            @if (isMobile)
            {
                @Html.TextBoxFor(x => x.SmallProductImageHeight, new { id = "settingsTemplateSmallProductImageHeight", @class = "form-control form-control input-alt-mobile", ng_model = "settingsTemplate.SmallProductImageHeight", type = "number", min = "10", max = "100000", style = "", validation_input_text = T("Admin.Settings.Template.SmallProductImage") })
            }
            else
            {
                @Html.TextBoxFor(x => x.SmallProductImageHeight, new { id = "settingsTemplateSmallProductImageHeight", @class = "form-control form-control input-alt-mobile", ng_model = "settingsTemplate.SmallProductImageHeight", type = "number", min = "10", max = "100000", style = "width:120px;", validation_input_text = T("Admin.Settings.Template.SmallProductImage") })
            }
            <span class="col-xs-slim">px</span>
        </div>
    </div>
</div>

<div class="form-group row setting__form-group">
    <div class="col-xs-12 col-md-3 col-wl-2">
        <div class="control-label">
            @T("Admin.Settings.Template.XSmallProductImage")
        </div>
    </div>
    <div class="col-xs-6 col-md-2">
        <label for="settingsTemplateXSmallProductImageWidth" class="@(isMobile ? "block m-b-sm" : "control-label m-b-xs")">
            @T("Admin.Settings.Template.Width")
        </label>
        <div class="input-group flex middle-xs m-b-sm">
            @if (isMobile)
            {
                @Html.TextBoxFor(x => x.XSmallProductImageWidth, new { id = "settingsTemplateXSmallProductImageWidth", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.XSmallProductImageWidth", type = "number", min = "10", max = "100000", style = "", validation_input_text = T("Admin.Settings.Template.XSmallProductImage") })
            }
            else
            {
                @Html.TextBoxFor(x => x.XSmallProductImageWidth, new { id = "settingsTemplateXSmallProductImageWidth", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.XSmallProductImageWidth", type = "number", min = "10", max = "100000", style = "width:120px;", validation_input_text = T("Admin.Settings.Template.XSmallProductImage") })
            }
            <span class="col-xs-slim">px</span>&nbsp;
        </div>
    </div>
    <div class="col-xs-6 col-md-2">
        <label for="settingsTemplateXSmallProductImageHeight" class="@(isMobile ? "block m-b-sm" : "control-label m-b-xs")">
            @T("Admin.Settings.Template.Height")
        </label>
        <div class="input-group flex middle-xs">
            @if (isMobile)
            {
                @Html.TextBoxFor(x => x.XSmallProductImageHeight, new { id = "settingsTemplateXSmallProductImageHeight", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.XSmallProductImageHeight", type = "number", min = "10", max = "100000", style = "", validation_input_text = T("Admin.Settings.Template.XSmallProductImage") })
            }
            else
            {
                @Html.TextBoxFor(x => x.XSmallProductImageHeight, new { id = "settingsTemplateXSmallProductImageHeight", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.XSmallProductImageHeight", type = "number", min = "10", max = "100000", style = "width:120px;", validation_input_text = T("Admin.Settings.Template.XSmallProductImage") })
            }
            <span class="col-xs-slim">px</span>
        </div>
    </div>
</div>

<div class="form-group row setting__form-group">
    <div class="col-xs-12 col-md-3 col-wl-2">
        <div class="control-label">@T("Admin.Settings.Template.BigCategoryImage")</div>
    </div>
    <div class="col-xs-12 col-md-4 relative @(isMobile ? "flex" : "")">
        <a class="" href="" 
           ng-if="!settingsTemplate.startResizeCategoryPictures['Big']" 
           ng-click="settingsTemplate.resizeCategoryPictures('@AdvantShop.FilePath.CategoryImageType.Big.ToString()')">
            @T("Admin.Design.Index.ResizeGoodsCategoryBigPictures")
        </a>
        <cm-stat class="full-width" 
                 ng-if="settingsTemplate.startResizeCategoryPictures['Big']" 
                 data-on-finish="cmStat.deleteObsevarable()" 
                 on-tick="settingsTemplate.cmResizeCategoryStatOnTick(data, 'Big')">
            <uib-progressbar max="cmStat.entity.Total" value="cmStat.entity.Processed">
                <span style="color:white; white-space:nowrap;"><span ng-bind="cmStat.entity.Processed"></span> / <span ng-bind="cmStat.entity.Total"></span></span>
            </uib-progressbar>
        </cm-stat>
        <help-trigger ng-if="!settingsTemplate.startResizeCategoryPictures['Big']" 
                      class="ng-cloak m-l-xs @(isMobile ? "flex end-xs flex-grow" : "")" 
                      classes="'setting__catalog-popover-custom'" 
                      data-title="@T("Admin.Design.Index.ResizeGoodsCategoryBigPictures")">
            @T("Admin.SettingsCatalog.CatalogCommon.ResizeGoodsPicturesNote")
        </help-trigger>
    </div>
</div>

<div class="form-group row setting__form-group">
    <div class="col-xs-12 col-md-3 col-wl-2 @(isMobile ? "hidden-xs visible-md" : "")">
        <div class="control-label">
        </div>
    </div>
    <div class="col-xs-6 col-md-2">
        <label for="settingsTemplateBigCategoryImageWidth" class="@(isMobile ? "block m-b-sm" : "control-label m-b-xs")">
            @T("Admin.Settings.Template.Width")
        </label>
        <div class="input-group m-b-sm flex middle-xs">
            @if (isMobile)
            {
                @Html.TextBoxFor(x => x.BigCategoryImageWidth, new { id = "settingsTemplateBigCategoryImageWidth", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.BigCategoryImageWidth", type = "number", min = "10", max = "100000", style = "", validation_input_text = T("Admin.Settings.Template.BigCategoryImage") })
            }
            else
            {
                @Html.TextBoxFor(x => x.BigCategoryImageWidth, new { id = "settingsTemplateBigCategoryImageWidth", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.BigCategoryImageWidth", type = "number", min = "10", max = "100000", style = "width:120px;", validation_input_text = T("Admin.Settings.Template.BigCategoryImage") })
            }
            <span class="col-xs-slim">px</span>&nbsp;
        </div>
    </div>
    <div class="col-xs-6 col-md-2">
        <label for="settingsTemplateBigCategoryImageHeight" class="@(isMobile ? "block m-b-xs" : "control-label m-b-xs")">
            @T("Admin.Settings.Template.Height")
        </label>
        <div class="input-group flex middle-xs">
            @if (isMobile)
            {
                @Html.TextBoxFor(x => x.BigCategoryImageHeight, new { id = "settingsTemplateBigCategoryImageHeight", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.BigCategoryImageHeight", type = "number", min = "10", max = "100000", style = "", validation_input_text = T("Admin.Settings.Template.BigCategoryImage") })
            }
            else
            {
                @Html.TextBoxFor(x => x.BigCategoryImageHeight, new { id = "settingsTemplateBigCategoryImageHeight", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.BigCategoryImageHeight", type = "number", min = "10", max = "100000", style = "width:120px;", validation_input_text = T("Admin.Settings.Template.BigCategoryImage") })
            }
            <span class="col-xs-slim">px</span>
        </div>
    </div>
</div>

<div class="form-group row setting__form-group">
    <div class="col-xs-12 col-md-3 col-wl-2">
        <div class="control-label">@T("Admin.Settings.Template.SmallCategoryImage")</div>
    </div>
    <div class="col-xs-12 col-md-4 relative @(isMobile ? "flex" : "")">
        <a class="" href=""
           ng-if="!settingsTemplate.startResizeCategoryPictures['Small']"
           ng-click="settingsTemplate.resizeCategoryPictures('@AdvantShop.FilePath.CategoryImageType.Small.ToString()')">
            @T("Admin.Design.Index.ResizeGoodsCategorySmallPictures")
        </a>
        <cm-stat class="full-width"
                 ng-if="settingsTemplate.startResizeCategoryPictures['Small']"
                 data-on-finish="cmStat.deleteObsevarable()"
                 on-tick="settingsTemplate.cmResizeCategoryStatOnTick(data, 'Small')">
            <uib-progressbar max="cmStat.entity.Total" value="cmStat.entity.Processed">
                <span style="color:white; white-space:nowrap;"><span ng-bind="cmStat.entity.Processed"></span> / <span ng-bind="cmStat.entity.Total"></span></span>
            </uib-progressbar>
        </cm-stat>
        <help-trigger ng-if="!settingsTemplate.startResizeCategoryPictures['Small']"
                      class="ng-cloak m-l-xs @(isMobile ? "flex end-xs flex-grow" : "")"
                      classes="'setting__catalog-popover-custom'"
                      data-title="@T("Admin.Design.Index.ResizeGoodsCategorySmallPictures")">
            @T("Admin.SettingsCatalog.CatalogCommon.ResizeGoodsPicturesNote")
        </help-trigger>
    </div>
</div>
<div class="form-group row setting__form-group">
    <div class="col-xs-12 col-md-3 col-wl-2 @(isMobile ? "hidden-xs visible-md" : "")">
        <div class="control-label">
        </div>
    </div>
    <div class="col-xs-6 col-md-2">
        <label for="settingsTemplateSmallCategoryImageWidth" class="@(isMobile ? "block m-b-sm" : "control-label") m-b-xs">
            @T("Admin.Settings.Template.Width")
        </label>
        <div class="input-group m-b-sm flex middle-xs">
            @if (isMobile)
            {
                @Html.TextBoxFor(x => x.SmallCategoryImageWidth, new { id = "settingsTemplateSmallCategoryImageWidth", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.SmallCategoryImageWidth", type = "number", min = "10", max = "100000", style = "", validation_input_text = T("Admin.Settings.Template.SmallCategoryImage") })
            }
            else
            {
                @Html.TextBoxFor(x => x.SmallCategoryImageWidth, new { id = "settingsTemplateSmallCategoryImageWidth", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.SmallCategoryImageWidth", type = "number", min = "10", max = "100000", style = "width:120px;", validation_input_text = T("Admin.Settings.Template.SmallCategoryImage") })
            }
            <span class="col-xs-slim">px</span>&nbsp;
        </div>
    </div>
    <div class="col-xs-6 col-md-2">
        <label for="settingsTemplateSmallCategoryImageHeight" class="@(isMobile ? "block m-b-sm" : "control-label m-b-xs")">
            @T("Admin.Settings.Template.Height")
        </label>
        <div class="input-group flex middle-xs">
            @if (isMobile)
            {
                @Html.TextBoxFor(x => x.SmallCategoryImageHeight, new { id = "settingsTemplateSmallCategoryImageHeight", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.SmallCategoryImageHeight", type = "number", min = "10", max = "100000", style = "", validation_input_text = T("Admin.Settings.Template.SmallCategoryImage") })
            }
            else
            {
                @Html.TextBoxFor(x => x.SmallCategoryImageHeight, new { id = "settingsTemplateSmallCategoryImageHeight", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.SmallCategoryImageHeight", type = "number", min = "10", max = "100000", style = "width:120px;", validation_input_text = T("Admin.Settings.Template.SmallCategoryImage") })
            }
            <span class="col-xs-slim">px</span>
        </div>
    </div>
</div>

@if (FeaturesService.IsEnabled(EFeature.CustomOptionPicture))
{
    <div class="form-group row setting__form-group">
        <div class="col-xs-12 col-md-3 col-wl-2">
            <div class="control-label">
                @T("Admin.Settings.Template.CustomOptions")
            </div>
        </div>
        <div class="col-xs-6 col-md-2">
            <label for="settingsTemplateCustomOptionsImageWidth" class="@(isMobile ? "block m-b-sm" : "control-label") m-b-xs">
                @T("Admin.Settings.Template.Width")
            </label>
            <div class="input-group m-b-sm flex middle-xs">
                @if (isMobile)
                {
                    @Html.TextBoxFor(x => x.CustomOptionsImageWidth, new { id = "settingsTemplateCustomOptionsImageWidth", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.CustomOptionsImageWidth", type = "number", min = "10", max = "100000", style = "", validation_input_text = T("Admin.Settings.Template.CustomOptions") })
                }
                else
                {
                    @Html.TextBoxFor(x => x.CustomOptionsImageWidth, new { id = "settingsTemplateCustomOptionsImageWidth", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.CustomOptionsImageWidth", type = "number", min = "10", max = "100000", style = "width:120px;", validation_input_text = T("Admin.Settings.Template.CustomOptions") })
                }
                <span class="col-xs-slim">px</span>&nbsp;
            </div>
        </div>
        <div class="col-xs-6 col-md-2">
            <label for="settingsTemplateCustomOptionsImageHeight" class="@(isMobile ? "block m-b-sm" : "control-label m-b-xs")">
                @T("Admin.Settings.Template.Height")
            </label>
            <div class="input-group flex middle-xs">
                @if (isMobile)
                {
                    @Html.TextBoxFor(x => x.CustomOptionsImageHeight, new { id = "settingsTemplateCustomOptionsImageHeight", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.CustomOptionsImageHeight", type = "number", min = "10", max = "100000", style = "", validation_input_text = T("Admin.Settings.Template.CustomOptions") })
                }
                else
                {
                    @Html.TextBoxFor(x => x.CustomOptionsImageHeight, new { id = "settingsTemplateCustomOptionsImageHeight", @class = "form-control input-alt-mobile", ng_model = "settingsTemplate.CustomOptionsImageHeight", type = "number", min = "10", max = "100000", style = "width:120px;", validation_input_text = T("Admin.Settings.Template.CustomOptions") })
                }
                <span class="col-xs-slim">px</span>
            </div>
        </div>
    </div>
}